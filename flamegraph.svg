<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="870" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="853.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="853.00"> </text><svg id="frames" x="10" width="1180" total_samples="43900"><g><title>`0x447A0000 (22,528 samples, 51.32%)</title><rect x="0.0046%" y="805" width="51.3166%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="22528"/><text x="0.2546%" y="815.50">`0x447A0000</text></g><g><title>block.exe`_blake3_compress_in_place_sse41() (22,528 samples, 51.32%)</title><rect x="0.0046%" y="789" width="51.3166%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="22528"/><text x="0.2546%" y="799.50">block.exe`_blake3_compress_in_place_sse41()</text></g><g><title>`0x7FFCAE0C5986 (5 samples, 0.01%)</title><rect x="51.3303%" y="773" width="0.0114%" height="15" fill="rgb(221,193,54)" fg:x="22534" fg:w="5"/><text x="51.5803%" y="783.50"></text></g><g><title>`0x7FFCAE0F23CA (5 samples, 0.01%)</title><rect x="51.3303%" y="757" width="0.0114%" height="15" fill="rgb(248,212,6)" fg:x="22534" fg:w="5"/><text x="51.5803%" y="767.50"></text></g><g><title>`0x7FFCAE0A0DCB (5 samples, 0.01%)</title><rect x="51.3303%" y="741" width="0.0114%" height="15" fill="rgb(208,68,35)" fg:x="22534" fg:w="5"/><text x="51.5803%" y="751.50"></text></g><g><title>`0x7FFCAE0B88D4 (5 samples, 0.01%)</title><rect x="51.3417%" y="629" width="0.0114%" height="15" fill="rgb(232,128,0)" fg:x="22539" fg:w="5"/><text x="51.5917%" y="639.50"></text></g><g><title>`0x7FFCAE0A0EBF (5 samples, 0.01%)</title><rect x="51.3417%" y="613" width="0.0114%" height="15" fill="rgb(207,160,47)" fg:x="22539" fg:w="5"/><text x="51.5917%" y="623.50"></text></g><g><title>`0x7FFCAB9DBAE8 (7 samples, 0.02%)</title><rect x="51.3417%" y="741" width="0.0159%" height="15" fill="rgb(228,23,34)" fg:x="22539" fg:w="7"/><text x="51.5917%" y="751.50"></text></g><g><title>`0x7FFCAB9E8F91 (7 samples, 0.02%)</title><rect x="51.3417%" y="725" width="0.0159%" height="15" fill="rgb(218,30,26)" fg:x="22539" fg:w="7"/><text x="51.5917%" y="735.50"></text></g><g><title>`0x7FFCAB9E1843 (7 samples, 0.02%)</title><rect x="51.3417%" y="709" width="0.0159%" height="15" fill="rgb(220,122,19)" fg:x="22539" fg:w="7"/><text x="51.5917%" y="719.50"></text></g><g><title>`0x7FFCAB466452 (7 samples, 0.02%)</title><rect x="51.3417%" y="693" width="0.0159%" height="15" fill="rgb(250,228,42)" fg:x="22539" fg:w="7"/><text x="51.5917%" y="703.50"></text></g><g><title>`0x7FFC77D435EC (7 samples, 0.02%)</title><rect x="51.3417%" y="677" width="0.0159%" height="15" fill="rgb(240,193,28)" fg:x="22539" fg:w="7"/><text x="51.5917%" y="687.50"></text></g><g><title>`0x7FFCAE0BA25A (7 samples, 0.02%)</title><rect x="51.3417%" y="661" width="0.0159%" height="15" fill="rgb(216,20,37)" fg:x="22539" fg:w="7"/><text x="51.5917%" y="671.50"></text></g><g><title>`0x7FFCAE0A8CAC (7 samples, 0.02%)</title><rect x="51.3417%" y="645" width="0.0159%" height="15" fill="rgb(206,188,39)" fg:x="22539" fg:w="7"/><text x="51.5917%" y="655.50"></text></g><g><title>`0x7FFCAB9DBCD9 (8 samples, 0.02%)</title><rect x="51.3417%" y="757" width="0.0182%" height="15" fill="rgb(217,207,13)" fg:x="22539" fg:w="8"/><text x="51.5917%" y="767.50"></text></g><g><title>`0x7FFC7CFB1310 (19 samples, 0.04%)</title><rect x="56.5945%" y="373" width="0.0433%" height="15" fill="rgb(231,73,38)" fg:x="24845" fg:w="19"/><text x="56.8445%" y="383.50"></text></g><g><title>`0x7FFC7CFB1324 (5 samples, 0.01%)</title><rect x="56.6515%" y="373" width="0.0114%" height="15" fill="rgb(225,20,46)" fg:x="24870" fg:w="5"/><text x="56.9015%" y="383.50"></text></g><g><title>`0x7FFC7CFB1330 (9 samples, 0.02%)</title><rect x="56.6629%" y="373" width="0.0205%" height="15" fill="rgb(210,31,41)" fg:x="24875" fg:w="9"/><text x="56.9129%" y="383.50"></text></g><g><title>`0x7FFC7CFB1338 (9 samples, 0.02%)</title><rect x="56.6834%" y="373" width="0.0205%" height="15" fill="rgb(221,200,47)" fg:x="24884" fg:w="9"/><text x="56.9334%" y="383.50"></text></g><g><title>`0x7FFC7CFB133B (87 samples, 0.20%)</title><rect x="56.7039%" y="373" width="0.1982%" height="15" fill="rgb(226,26,5)" fg:x="24893" fg:w="87"/><text x="56.9539%" y="383.50"></text></g><g><title>`0x7FFC7CFB142A (7 samples, 0.02%)</title><rect x="56.9021%" y="373" width="0.0159%" height="15" fill="rgb(249,33,26)" fg:x="24980" fg:w="7"/><text x="57.1521%" y="383.50"></text></g><g><title>`0x7FFC7CFB142C (7 samples, 0.02%)</title><rect x="56.9180%" y="373" width="0.0159%" height="15" fill="rgb(235,183,28)" fg:x="24987" fg:w="7"/><text x="57.1680%" y="383.50"></text></g><g><title>block.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::as_mut_ptr (153 samples, 0.35%)</title><rect x="56.9385%" y="373" width="0.3485%" height="15" fill="rgb(221,5,38)" fg:x="24996" fg:w="153"/><text x="57.1885%" y="383.50"></text></g><g><title>block.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::ptr (39 samples, 0.09%)</title><rect x="57.1982%" y="357" width="0.0888%" height="15" fill="rgb(247,18,42)" fg:x="25110" fg:w="39"/><text x="57.4482%" y="367.50"></text></g><g><title>block.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::capacity (32 samples, 0.07%)</title><rect x="57.4237%" y="325" width="0.0729%" height="15" fill="rgb(241,131,45)" fg:x="25209" fg:w="32"/><text x="57.6737%" y="335.50"></text></g><g><title>block.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::reserve (98 samples, 0.22%)</title><rect x="57.2870%" y="373" width="0.2232%" height="15" fill="rgb(249,31,29)" fg:x="25149" fg:w="98"/><text x="57.5370%" y="383.50"></text></g><g><title>block.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::reserve (98 samples, 0.22%)</title><rect x="57.2870%" y="357" width="0.2232%" height="15" fill="rgb(225,111,53)" fg:x="25149" fg:w="98"/><text x="57.5370%" y="367.50"></text></g><g><title>block.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::needs_to_grow (72 samples, 0.16%)</title><rect x="57.3462%" y="341" width="0.1640%" height="15" fill="rgb(238,160,17)" fg:x="25175" fg:w="72"/><text x="57.5962%" y="351.50"></text></g><g><title>block.exe`core::num::impl$11::wrapping_sub (6 samples, 0.01%)</title><rect x="57.4966%" y="325" width="0.0137%" height="15" fill="rgb(214,148,48)" fg:x="25241" fg:w="6"/><text x="57.7466%" y="335.50"></text></g><g><title>block.exe`core::intrinsics::copy_nonoverlapping (22 samples, 0.05%)</title><rect x="57.5103%" y="373" width="0.0501%" height="15" fill="rgb(232,36,49)" fg:x="25247" fg:w="22"/><text x="57.7603%" y="383.50"></text></g><g><title>block.exe`core::ptr::mut_ptr::impl$0::add (106 samples, 0.24%)</title><rect x="57.5604%" y="373" width="0.2415%" height="15" fill="rgb(209,103,24)" fg:x="25269" fg:w="106"/><text x="57.8104%" y="383.50"></text></g><g><title>block.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::extend_from_slice(ref$&lt;slice2$ (1,027 samples, 2.34%)</title><rect x="55.6788%" y="421" width="2.3394%" height="15" fill="rgb(229,88,8)" fg:x="24443" fg:w="1027"/><text x="55.9288%" y="431.50">b..</text></g><g><title>block.exe`alloc::vec::spec_extend::impl$4::spec_extend(alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, core::slice::iter::Iter (1,027 samples, 2.34%)</title><rect x="55.6788%" y="405" width="2.3394%" height="15" fill="rgb(213,181,19)" fg:x="24443" fg:w="1027"/><text x="55.9288%" y="415.50">b..</text></g><g><title>block.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::append_elements(ptr_const$&lt;slice2$ (1,027 samples, 2.34%)</title><rect x="55.6788%" y="389" width="2.3394%" height="15" fill="rgb(254,191,54)" fg:x="24443" fg:w="1027"/><text x="55.9288%" y="399.50">b..</text></g><g><title>block.exe`memcpy (95 samples, 0.22%)</title><rect x="57.8018%" y="373" width="0.2164%" height="15" fill="rgb(241,83,37)" fg:x="25375" fg:w="95"/><text x="58.0518%" y="383.50"></text></g><g><title>`0x7FFCAE0CC610 (122 samples, 0.28%)</title><rect x="58.3417%" y="357" width="0.2779%" height="15" fill="rgb(233,36,39)" fg:x="25612" fg:w="122"/><text x="58.5917%" y="367.50"></text></g><g><title>`0x7FFCAE0CC615 (10 samples, 0.02%)</title><rect x="58.6196%" y="357" width="0.0228%" height="15" fill="rgb(226,3,54)" fg:x="25734" fg:w="10"/><text x="58.8696%" y="367.50"></text></g><g><title>`0x7FFCAE0CC61A (5 samples, 0.01%)</title><rect x="58.6424%" y="357" width="0.0114%" height="15" fill="rgb(245,192,40)" fg:x="25744" fg:w="5"/><text x="58.8924%" y="367.50"></text></g><g><title>`0x7FFCAE0CC61F (7 samples, 0.02%)</title><rect x="58.6560%" y="357" width="0.0159%" height="15" fill="rgb(238,167,29)" fg:x="25750" fg:w="7"/><text x="58.9060%" y="367.50"></text></g><g><title>`0x7FFCAE0CC622 (5 samples, 0.01%)</title><rect x="58.6720%" y="357" width="0.0114%" height="15" fill="rgb(232,182,51)" fg:x="25757" fg:w="5"/><text x="58.9220%" y="367.50"></text></g><g><title>`0x7FFCAE0CC62A (6 samples, 0.01%)</title><rect x="58.6925%" y="357" width="0.0137%" height="15" fill="rgb(231,60,39)" fg:x="25766" fg:w="6"/><text x="58.9425%" y="367.50"></text></g><g><title>`0x7FFCAE0CC630 (104 samples, 0.24%)</title><rect x="58.7062%" y="357" width="0.2369%" height="15" fill="rgb(208,69,12)" fg:x="25772" fg:w="104"/><text x="58.9562%" y="367.50"></text></g><g><title>`0x7FFCAE0CC63A (6 samples, 0.01%)</title><rect x="58.9476%" y="357" width="0.0137%" height="15" fill="rgb(235,93,37)" fg:x="25878" fg:w="6"/><text x="59.1976%" y="367.50"></text></g><g><title>`0x7FFCAE0CC63D (7 samples, 0.02%)</title><rect x="58.9613%" y="357" width="0.0159%" height="15" fill="rgb(213,116,39)" fg:x="25884" fg:w="7"/><text x="59.2113%" y="367.50"></text></g><g><title>`0x7FFCAE0CC640 (6 samples, 0.01%)</title><rect x="58.9772%" y="357" width="0.0137%" height="15" fill="rgb(222,207,29)" fg:x="25891" fg:w="6"/><text x="59.2272%" y="367.50"></text></g><g><title>`0x7FFCAE0CC649 (7 samples, 0.02%)</title><rect x="58.9954%" y="357" width="0.0159%" height="15" fill="rgb(206,96,30)" fg:x="25899" fg:w="7"/><text x="59.2454%" y="367.50"></text></g><g><title>`0x7FFCAE0CC64B (98 samples, 0.22%)</title><rect x="59.0114%" y="357" width="0.2232%" height="15" fill="rgb(218,138,4)" fg:x="25906" fg:w="98"/><text x="59.2614%" y="367.50"></text></g><g><title>`0x7FFCAE0CC64E (5 samples, 0.01%)</title><rect x="59.2346%" y="357" width="0.0114%" height="15" fill="rgb(250,191,14)" fg:x="26004" fg:w="5"/><text x="59.4846%" y="367.50"></text></g><g><title>`0x7FFCAE0CC653 (5 samples, 0.01%)</title><rect x="59.2460%" y="357" width="0.0114%" height="15" fill="rgb(239,60,40)" fg:x="26009" fg:w="5"/><text x="59.4960%" y="367.50"></text></g><g><title>`0x7FFCAE0CC658 (7 samples, 0.02%)</title><rect x="59.2574%" y="357" width="0.0159%" height="15" fill="rgb(206,27,48)" fg:x="26014" fg:w="7"/><text x="59.5074%" y="367.50"></text></g><g><title>`0x7FFCAE0CC695 (8 samples, 0.02%)</title><rect x="59.2938%" y="357" width="0.0182%" height="15" fill="rgb(225,35,8)" fg:x="26030" fg:w="8"/><text x="59.5438%" y="367.50"></text></g><g><title>`0x7FFCAE0CC69B (99 samples, 0.23%)</title><rect x="59.3121%" y="357" width="0.2255%" height="15" fill="rgb(250,213,24)" fg:x="26038" fg:w="99"/><text x="59.5621%" y="367.50"></text></g><g><title>`0x7FFCAE0CC6A4 (8 samples, 0.02%)</title><rect x="59.5695%" y="357" width="0.0182%" height="15" fill="rgb(247,123,22)" fg:x="26151" fg:w="8"/><text x="59.8195%" y="367.50"></text></g><g><title>`0x7FFCAE0CC6AB (89 samples, 0.20%)</title><rect x="59.5945%" y="357" width="0.2027%" height="15" fill="rgb(231,138,38)" fg:x="26162" fg:w="89"/><text x="59.8445%" y="367.50"></text></g><g><title>`0x7FFCAE0CC6C6 (7 samples, 0.02%)</title><rect x="59.8314%" y="357" width="0.0159%" height="15" fill="rgb(231,145,46)" fg:x="26266" fg:w="7"/><text x="60.0814%" y="367.50"></text></g><g><title>`0x7FFCAE0CC6C9 (8 samples, 0.02%)</title><rect x="59.8474%" y="357" width="0.0182%" height="15" fill="rgb(251,118,11)" fg:x="26273" fg:w="8"/><text x="60.0974%" y="367.50"></text></g><g><title>`0x7FFCAE0CC6CF (75 samples, 0.17%)</title><rect x="59.8656%" y="357" width="0.1708%" height="15" fill="rgb(217,147,25)" fg:x="26281" fg:w="75"/><text x="60.1156%" y="367.50"></text></g><g><title>`0x7FFCAE0CC6DF (7 samples, 0.02%)</title><rect x="60.0501%" y="357" width="0.0159%" height="15" fill="rgb(247,81,37)" fg:x="26362" fg:w="7"/><text x="60.3001%" y="367.50"></text></g><g><title>`0x7FFCAE0CC6E3 (6 samples, 0.01%)</title><rect x="60.0661%" y="357" width="0.0137%" height="15" fill="rgb(209,12,38)" fg:x="26369" fg:w="6"/><text x="60.3161%" y="367.50"></text></g><g><title>`0x7FFCAE0CC6E7 (6 samples, 0.01%)</title><rect x="60.0797%" y="357" width="0.0137%" height="15" fill="rgb(227,1,9)" fg:x="26375" fg:w="6"/><text x="60.3297%" y="367.50"></text></g><g><title>`0x7FFCAE0CC6ED (5 samples, 0.01%)</title><rect x="60.0979%" y="357" width="0.0114%" height="15" fill="rgb(248,47,43)" fg:x="26383" fg:w="5"/><text x="60.3479%" y="367.50"></text></g><g><title>`0x7FFCAE0CC6F7 (98 samples, 0.22%)</title><rect x="60.1185%" y="357" width="0.2232%" height="15" fill="rgb(221,10,30)" fg:x="26392" fg:w="98"/><text x="60.3685%" y="367.50"></text></g><g><title>`0x7FFCAE0CC700 (12 samples, 0.03%)</title><rect x="60.3440%" y="357" width="0.0273%" height="15" fill="rgb(210,229,1)" fg:x="26491" fg:w="12"/><text x="60.5940%" y="367.50"></text></g><g><title>`0x7FFCAE0CC702 (6 samples, 0.01%)</title><rect x="60.3713%" y="357" width="0.0137%" height="15" fill="rgb(222,148,37)" fg:x="26503" fg:w="6"/><text x="60.6213%" y="367.50"></text></g><g><title>`0x7FFCAE0CC709 (5 samples, 0.01%)</title><rect x="60.3850%" y="357" width="0.0114%" height="15" fill="rgb(234,67,33)" fg:x="26509" fg:w="5"/><text x="60.6350%" y="367.50"></text></g><g><title>`0x7FFCAE0CC70C (8 samples, 0.02%)</title><rect x="60.3964%" y="357" width="0.0182%" height="15" fill="rgb(247,98,35)" fg:x="26514" fg:w="8"/><text x="60.6464%" y="367.50"></text></g><g><title>`0x7FFCAE0CC70F (5 samples, 0.01%)</title><rect x="60.4146%" y="357" width="0.0114%" height="15" fill="rgb(247,138,52)" fg:x="26522" fg:w="5"/><text x="60.6646%" y="367.50"></text></g><g><title>`0x7FFCAE0CC71C (94 samples, 0.21%)</title><rect x="60.4351%" y="357" width="0.2141%" height="15" fill="rgb(213,79,30)" fg:x="26531" fg:w="94"/><text x="60.6851%" y="367.50"></text></g><g><title>`0x7FFCAE0CC71F (6 samples, 0.01%)</title><rect x="60.6492%" y="357" width="0.0137%" height="15" fill="rgb(246,177,23)" fg:x="26625" fg:w="6"/><text x="60.8992%" y="367.50"></text></g><g><title>`0x7FFCAE0CC725 (6 samples, 0.01%)</title><rect x="60.6629%" y="357" width="0.0137%" height="15" fill="rgb(230,62,27)" fg:x="26631" fg:w="6"/><text x="60.9129%" y="367.50"></text></g><g><title>`0x7FFCAE0CC732 (5 samples, 0.01%)</title><rect x="60.6834%" y="357" width="0.0114%" height="15" fill="rgb(216,154,8)" fg:x="26640" fg:w="5"/><text x="60.9334%" y="367.50"></text></g><g><title>`0x7FFCAE0CC739 (7 samples, 0.02%)</title><rect x="60.7016%" y="357" width="0.0159%" height="15" fill="rgb(244,35,45)" fg:x="26648" fg:w="7"/><text x="60.9516%" y="367.50"></text></g><g><title>`0x7FFCAE0CC742 (7 samples, 0.02%)</title><rect x="60.7244%" y="357" width="0.0159%" height="15" fill="rgb(251,115,12)" fg:x="26658" fg:w="7"/><text x="60.9744%" y="367.50"></text></g><g><title>`0x7FFCAE0CC74F (102 samples, 0.23%)</title><rect x="60.7563%" y="357" width="0.2323%" height="15" fill="rgb(240,54,50)" fg:x="26672" fg:w="102"/><text x="61.0063%" y="367.50"></text></g><g><title>`0x7FFCAE0CC753 (5 samples, 0.01%)</title><rect x="60.9886%" y="357" width="0.0114%" height="15" fill="rgb(233,84,52)" fg:x="26774" fg:w="5"/><text x="61.2386%" y="367.50"></text></g><g><title>`0x7FFCAE0CC75A (8 samples, 0.02%)</title><rect x="61.0046%" y="357" width="0.0182%" height="15" fill="rgb(207,117,47)" fg:x="26781" fg:w="8"/><text x="61.2546%" y="367.50"></text></g><g><title>`0x7FFCAE0CC761 (5 samples, 0.01%)</title><rect x="61.0228%" y="357" width="0.0114%" height="15" fill="rgb(249,43,39)" fg:x="26789" fg:w="5"/><text x="61.2728%" y="367.50"></text></g><g><title>`0x7FFCAE0CC777 (93 samples, 0.21%)</title><rect x="61.0524%" y="357" width="0.2118%" height="15" fill="rgb(209,38,44)" fg:x="26802" fg:w="93"/><text x="61.3024%" y="367.50"></text></g><g><title>`0x7FFCAE0CC77F (5 samples, 0.01%)</title><rect x="61.2733%" y="357" width="0.0114%" height="15" fill="rgb(236,212,23)" fg:x="26899" fg:w="5"/><text x="61.5233%" y="367.50"></text></g><g><title>`0x7FFCAE0CC782 (5 samples, 0.01%)</title><rect x="61.2847%" y="357" width="0.0114%" height="15" fill="rgb(242,79,21)" fg:x="26904" fg:w="5"/><text x="61.5347%" y="367.50"></text></g><g><title>`0x7FFCAE0CC78D (7 samples, 0.02%)</title><rect x="61.3052%" y="357" width="0.0159%" height="15" fill="rgb(211,96,35)" fg:x="26913" fg:w="7"/><text x="61.5552%" y="367.50"></text></g><g><title>`0x7FFCAE0CC796 (5 samples, 0.01%)</title><rect x="61.3303%" y="357" width="0.0114%" height="15" fill="rgb(253,215,40)" fg:x="26924" fg:w="5"/><text x="61.5803%" y="367.50"></text></g><g><title>`0x7FFCAE0CC79D (89 samples, 0.20%)</title><rect x="61.3417%" y="357" width="0.2027%" height="15" fill="rgb(211,81,21)" fg:x="26929" fg:w="89"/><text x="61.5917%" y="367.50"></text></g><g><title>`0x7FFCAE0CC7A7 (5 samples, 0.01%)</title><rect x="61.5535%" y="357" width="0.0114%" height="15" fill="rgb(208,190,38)" fg:x="27022" fg:w="5"/><text x="61.8035%" y="367.50"></text></g><g><title>`0x7FFCAE0CC7B1 (5 samples, 0.01%)</title><rect x="61.5718%" y="357" width="0.0114%" height="15" fill="rgb(235,213,38)" fg:x="27030" fg:w="5"/><text x="61.8218%" y="367.50"></text></g><g><title>`0x7FFCAE0CC7B5 (8 samples, 0.02%)</title><rect x="61.5831%" y="357" width="0.0182%" height="15" fill="rgb(237,122,38)" fg:x="27035" fg:w="8"/><text x="61.8331%" y="367.50"></text></g><g><title>`0x7FFCAE0CCFF0 (93 samples, 0.21%)</title><rect x="61.6128%" y="341" width="0.2118%" height="15" fill="rgb(244,218,35)" fg:x="27048" fg:w="93"/><text x="61.8628%" y="351.50"></text></g><g><title>`0x7FFCAE0CCFF5 (8 samples, 0.02%)</title><rect x="61.8246%" y="341" width="0.0182%" height="15" fill="rgb(240,68,47)" fg:x="27141" fg:w="8"/><text x="62.0746%" y="351.50"></text></g><g><title>`0x7FFCAE0CCFFF (7 samples, 0.02%)</title><rect x="61.8451%" y="341" width="0.0159%" height="15" fill="rgb(210,16,53)" fg:x="27150" fg:w="7"/><text x="62.0951%" y="351.50"></text></g><g><title>`0x7FFCAE0CD000 (6 samples, 0.01%)</title><rect x="61.8610%" y="341" width="0.0137%" height="15" fill="rgb(235,124,12)" fg:x="27157" fg:w="6"/><text x="62.1110%" y="351.50"></text></g><g><title>`0x7FFCAE0CD001 (5 samples, 0.01%)</title><rect x="61.8747%" y="341" width="0.0114%" height="15" fill="rgb(224,169,11)" fg:x="27163" fg:w="5"/><text x="62.1247%" y="351.50"></text></g><g><title>`0x7FFCAE0CD002 (6 samples, 0.01%)</title><rect x="61.8861%" y="341" width="0.0137%" height="15" fill="rgb(250,166,2)" fg:x="27168" fg:w="6"/><text x="62.1361%" y="351.50"></text></g><g><title>`0x7FFCAE0CD003 (5 samples, 0.01%)</title><rect x="61.8998%" y="341" width="0.0114%" height="15" fill="rgb(242,216,29)" fg:x="27174" fg:w="5"/><text x="62.1498%" y="351.50"></text></g><g><title>`0x7FFCAE0CD005 (104 samples, 0.24%)</title><rect x="61.9112%" y="341" width="0.2369%" height="15" fill="rgb(230,116,27)" fg:x="27179" fg:w="104"/><text x="62.1612%" y="351.50"></text></g><g><title>`0x7FFCAE0CD007 (6 samples, 0.01%)</title><rect x="62.1481%" y="341" width="0.0137%" height="15" fill="rgb(228,99,48)" fg:x="27283" fg:w="6"/><text x="62.3981%" y="351.50"></text></g><g><title>`0x7FFCAE0CD009 (6 samples, 0.01%)</title><rect x="62.1617%" y="341" width="0.0137%" height="15" fill="rgb(253,11,6)" fg:x="27289" fg:w="6"/><text x="62.4117%" y="351.50"></text></g><g><title>`0x7FFCAE0CD00F (10 samples, 0.02%)</title><rect x="62.1845%" y="341" width="0.0228%" height="15" fill="rgb(247,143,39)" fg:x="27299" fg:w="10"/><text x="62.4345%" y="351.50"></text></g><g><title>`0x7FFCAE0CD013 (6 samples, 0.01%)</title><rect x="62.2073%" y="341" width="0.0137%" height="15" fill="rgb(236,97,10)" fg:x="27309" fg:w="6"/><text x="62.4573%" y="351.50"></text></g><g><title>`0x7FFCAE0CD021 (9 samples, 0.02%)</title><rect x="62.2255%" y="341" width="0.0205%" height="15" fill="rgb(233,208,19)" fg:x="27317" fg:w="9"/><text x="62.4755%" y="351.50"></text></g><g><title>`0x7FFCAE0CD023 (96 samples, 0.22%)</title><rect x="62.2460%" y="341" width="0.2187%" height="15" fill="rgb(216,164,2)" fg:x="27326" fg:w="96"/><text x="62.4960%" y="351.50"></text></g><g><title>`0x7FFCAE0CD02A (13 samples, 0.03%)</title><rect x="62.4647%" y="341" width="0.0296%" height="15" fill="rgb(220,129,5)" fg:x="27422" fg:w="13"/><text x="62.7147%" y="351.50"></text></g><g><title>`0x7FFCAE0CD038 (5 samples, 0.01%)</title><rect x="62.5057%" y="341" width="0.0114%" height="15" fill="rgb(242,17,10)" fg:x="27440" fg:w="5"/><text x="62.7557%" y="351.50"></text></g><g><title>`0x7FFCAE0CD03D (6 samples, 0.01%)</title><rect x="62.5171%" y="341" width="0.0137%" height="15" fill="rgb(242,107,0)" fg:x="27445" fg:w="6"/><text x="62.7671%" y="351.50"></text></g><g><title>`0x7FFCAE0CD03F (6 samples, 0.01%)</title><rect x="62.5308%" y="341" width="0.0137%" height="15" fill="rgb(251,28,31)" fg:x="27451" fg:w="6"/><text x="62.7808%" y="351.50"></text></g><g><title>`0x7FFCAE0CD04C (123 samples, 0.28%)</title><rect x="62.5558%" y="341" width="0.2802%" height="15" fill="rgb(233,223,10)" fg:x="27462" fg:w="123"/><text x="62.8058%" y="351.50"></text></g><g><title>`0x7FFCAE0CD050 (5 samples, 0.01%)</title><rect x="62.8360%" y="341" width="0.0114%" height="15" fill="rgb(215,21,27)" fg:x="27585" fg:w="5"/><text x="63.0860%" y="351.50"></text></g><g><title>`0x7FFCAE0CD05C (6 samples, 0.01%)</title><rect x="62.8565%" y="341" width="0.0137%" height="15" fill="rgb(232,23,21)" fg:x="27594" fg:w="6"/><text x="63.1065%" y="351.50"></text></g><g><title>`0x7FFCAE0CD063 (5 samples, 0.01%)</title><rect x="62.8747%" y="341" width="0.0114%" height="15" fill="rgb(244,5,23)" fg:x="27602" fg:w="5"/><text x="63.1247%" y="351.50"></text></g><g><title>`0x7FFCAE0CD06D (93 samples, 0.21%)</title><rect x="62.8952%" y="341" width="0.2118%" height="15" fill="rgb(226,81,46)" fg:x="27611" fg:w="93"/><text x="63.1452%" y="351.50"></text></g><g><title>`0x7FFCAE0CD072 (7 samples, 0.02%)</title><rect x="63.1071%" y="341" width="0.0159%" height="15" fill="rgb(247,70,30)" fg:x="27704" fg:w="7"/><text x="63.3571%" y="351.50"></text></g><g><title>`0x7FFCAE0CD074 (5 samples, 0.01%)</title><rect x="63.1230%" y="341" width="0.0114%" height="15" fill="rgb(212,68,19)" fg:x="27711" fg:w="5"/><text x="63.3730%" y="351.50"></text></g><g><title>`0x7FFCAE0CD082 (9 samples, 0.02%)</title><rect x="63.1412%" y="341" width="0.0205%" height="15" fill="rgb(240,187,13)" fg:x="27719" fg:w="9"/><text x="63.3912%" y="351.50"></text></g><g><title>`0x7FFCAE0CD087 (5 samples, 0.01%)</title><rect x="63.1617%" y="341" width="0.0114%" height="15" fill="rgb(223,113,26)" fg:x="27728" fg:w="5"/><text x="63.4117%" y="351.50"></text></g><g><title>`0x7FFCAE0CD08C (6 samples, 0.01%)</title><rect x="63.1731%" y="341" width="0.0137%" height="15" fill="rgb(206,192,2)" fg:x="27733" fg:w="6"/><text x="63.4231%" y="351.50"></text></g><g><title>`0x7FFCAE0CD092 (7 samples, 0.02%)</title><rect x="63.1868%" y="341" width="0.0159%" height="15" fill="rgb(241,108,4)" fg:x="27739" fg:w="7"/><text x="63.4368%" y="351.50"></text></g><g><title>`0x7FFCAE0CD098 (6 samples, 0.01%)</title><rect x="63.2027%" y="341" width="0.0137%" height="15" fill="rgb(247,173,49)" fg:x="27746" fg:w="6"/><text x="63.4527%" y="351.50"></text></g><g><title>`0x7FFCAE0CD09C (88 samples, 0.20%)</title><rect x="63.2164%" y="341" width="0.2005%" height="15" fill="rgb(224,114,35)" fg:x="27752" fg:w="88"/><text x="63.4664%" y="351.50"></text></g><g><title>`0x7FFCAE0CD0A5 (6 samples, 0.01%)</title><rect x="63.4191%" y="341" width="0.0137%" height="15" fill="rgb(245,159,27)" fg:x="27841" fg:w="6"/><text x="63.6691%" y="351.50"></text></g><g><title>`0x7FFCAE0CD0A8 (7 samples, 0.02%)</title><rect x="63.4328%" y="341" width="0.0159%" height="15" fill="rgb(245,172,44)" fg:x="27847" fg:w="7"/><text x="63.6828%" y="351.50"></text></g><g><title>`0x7FFCAE0CD0AB (5 samples, 0.01%)</title><rect x="63.4487%" y="341" width="0.0114%" height="15" fill="rgb(236,23,11)" fg:x="27854" fg:w="5"/><text x="63.6987%" y="351.50"></text></g><g><title>`0x7FFCAE0CD0AE (8 samples, 0.02%)</title><rect x="63.4601%" y="341" width="0.0182%" height="15" fill="rgb(205,117,38)" fg:x="27859" fg:w="8"/><text x="63.7101%" y="351.50"></text></g><g><title>`0x7FFCAE0CD0BA (5 samples, 0.01%)</title><rect x="63.4875%" y="341" width="0.0114%" height="15" fill="rgb(237,72,25)" fg:x="27871" fg:w="5"/><text x="63.7375%" y="351.50"></text></g><g><title>`0x7FFCAE0CD0BD (6 samples, 0.01%)</title><rect x="63.4989%" y="341" width="0.0137%" height="15" fill="rgb(244,70,9)" fg:x="27876" fg:w="6"/><text x="63.7489%" y="351.50"></text></g><g><title>`0x7FFCAE0CD0C3 (5 samples, 0.01%)</title><rect x="63.5125%" y="341" width="0.0114%" height="15" fill="rgb(217,125,39)" fg:x="27882" fg:w="5"/><text x="63.7625%" y="351.50"></text></g><g><title>`0x7FFCAE0CD0C6 (85 samples, 0.19%)</title><rect x="63.5239%" y="341" width="0.1936%" height="15" fill="rgb(235,36,10)" fg:x="27887" fg:w="85"/><text x="63.7739%" y="351.50"></text></g><g><title>`0x7FFCAE0CD0D3 (5 samples, 0.01%)</title><rect x="63.7267%" y="341" width="0.0114%" height="15" fill="rgb(251,123,47)" fg:x="27976" fg:w="5"/><text x="63.9767%" y="351.50"></text></g><g><title>`0x7FFCAE0CD0D5 (6 samples, 0.01%)</title><rect x="63.7380%" y="341" width="0.0137%" height="15" fill="rgb(221,13,13)" fg:x="27981" fg:w="6"/><text x="63.9880%" y="351.50"></text></g><g><title>`0x7FFCAE0CD0E3 (5 samples, 0.01%)</title><rect x="63.7585%" y="341" width="0.0114%" height="15" fill="rgb(238,131,9)" fg:x="27990" fg:w="5"/><text x="64.0085%" y="351.50"></text></g><g><title>`0x7FFCAE0CD0E5 (10 samples, 0.02%)</title><rect x="63.7699%" y="341" width="0.0228%" height="15" fill="rgb(211,50,8)" fg:x="27995" fg:w="10"/><text x="64.0199%" y="351.50"></text></g><g><title>`0x7FFCAE0CD0E8 (104 samples, 0.24%)</title><rect x="63.7927%" y="341" width="0.2369%" height="15" fill="rgb(245,182,24)" fg:x="28005" fg:w="104"/><text x="64.0427%" y="351.50"></text></g><g><title>`0x7FFCAE0CD0EC (8 samples, 0.02%)</title><rect x="64.0296%" y="341" width="0.0182%" height="15" fill="rgb(242,14,37)" fg:x="28109" fg:w="8"/><text x="64.2796%" y="351.50"></text></g><g><title>`0x7FFCAE0CD0EE (6 samples, 0.01%)</title><rect x="64.0478%" y="341" width="0.0137%" height="15" fill="rgb(246,228,12)" fg:x="28117" fg:w="6"/><text x="64.2978%" y="351.50"></text></g><g><title>`0x7FFCAE0CD0F7 (6 samples, 0.01%)</title><rect x="64.0820%" y="341" width="0.0137%" height="15" fill="rgb(213,55,15)" fg:x="28132" fg:w="6"/><text x="64.3320%" y="351.50"></text></g><g><title>`0x7FFCAE0CD0FD (7 samples, 0.02%)</title><rect x="64.0957%" y="341" width="0.0159%" height="15" fill="rgb(209,9,3)" fg:x="28138" fg:w="7"/><text x="64.3457%" y="351.50"></text></g><g><title>`0x7FFCAE0CD102 (2,677 samples, 6.10%)</title><rect x="64.1116%" y="341" width="6.0979%" height="15" fill="rgb(230,59,30)" fg:x="28145" fg:w="2677"/><text x="64.3616%" y="351.50">`0x7FFCA..</text></g><g><title>`0x7FFCAE0CD110 (87 samples, 0.20%)</title><rect x="70.2096%" y="341" width="0.1982%" height="15" fill="rgb(209,121,21)" fg:x="30822" fg:w="87"/><text x="70.4596%" y="351.50"></text></g><g><title>`0x7FFCAE0CD113 (6 samples, 0.01%)</title><rect x="70.4077%" y="341" width="0.0137%" height="15" fill="rgb(220,109,13)" fg:x="30909" fg:w="6"/><text x="70.6577%" y="351.50"></text></g><g><title>`0x7FFCAE0CD119 (6 samples, 0.01%)</title><rect x="70.4214%" y="341" width="0.0137%" height="15" fill="rgb(232,18,1)" fg:x="30915" fg:w="6"/><text x="70.6714%" y="351.50"></text></g><g><title>`0x7FFCAE0CD126 (5 samples, 0.01%)</title><rect x="70.4465%" y="341" width="0.0114%" height="15" fill="rgb(215,41,42)" fg:x="30926" fg:w="5"/><text x="70.6965%" y="351.50"></text></g><g><title>`0x7FFCAE0CD129 (5 samples, 0.01%)</title><rect x="70.4579%" y="341" width="0.0114%" height="15" fill="rgb(224,123,36)" fg:x="30931" fg:w="5"/><text x="70.7079%" y="351.50"></text></g><g><title>`0x7FFCAE0CD12F (5 samples, 0.01%)</title><rect x="70.4692%" y="341" width="0.0114%" height="15" fill="rgb(240,125,3)" fg:x="30936" fg:w="5"/><text x="70.7192%" y="351.50"></text></g><g><title>`0x7FFCAE0CD140 (6 samples, 0.01%)</title><rect x="70.4989%" y="341" width="0.0137%" height="15" fill="rgb(205,98,50)" fg:x="30949" fg:w="6"/><text x="70.7489%" y="351.50"></text></g><g><title>`0x7FFCAE0CD152 (100 samples, 0.23%)</title><rect x="70.5148%" y="341" width="0.2278%" height="15" fill="rgb(205,185,37)" fg:x="30956" fg:w="100"/><text x="70.7648%" y="351.50"></text></g><g><title>`0x7FFCAE0CD15A (6 samples, 0.01%)</title><rect x="70.7426%" y="341" width="0.0137%" height="15" fill="rgb(238,207,15)" fg:x="31056" fg:w="6"/><text x="70.9926%" y="351.50"></text></g><g><title>`0x7FFCAE0CD15D (6 samples, 0.01%)</title><rect x="70.7563%" y="341" width="0.0137%" height="15" fill="rgb(213,199,42)" fg:x="31062" fg:w="6"/><text x="71.0063%" y="351.50"></text></g><g><title>`0x7FFCAE0CD160 (5 samples, 0.01%)</title><rect x="70.7699%" y="341" width="0.0114%" height="15" fill="rgb(235,201,11)" fg:x="31068" fg:w="5"/><text x="71.0199%" y="351.50"></text></g><g><title>`0x7FFCAE0CD164 (6 samples, 0.01%)</title><rect x="70.7813%" y="341" width="0.0137%" height="15" fill="rgb(207,46,11)" fg:x="31073" fg:w="6"/><text x="71.0313%" y="351.50"></text></g><g><title>`0x7FFCAE0CD16B (5 samples, 0.01%)</title><rect x="70.8018%" y="341" width="0.0114%" height="15" fill="rgb(241,35,35)" fg:x="31082" fg:w="5"/><text x="71.0518%" y="351.50"></text></g><g><title>`0x7FFCAE0CD177 (95 samples, 0.22%)</title><rect x="70.8314%" y="341" width="0.2164%" height="15" fill="rgb(243,32,47)" fg:x="31095" fg:w="95"/><text x="71.0814%" y="351.50"></text></g><g><title>`0x7FFCAE0CD17E (6 samples, 0.01%)</title><rect x="71.0547%" y="341" width="0.0137%" height="15" fill="rgb(247,202,23)" fg:x="31193" fg:w="6"/><text x="71.3047%" y="351.50"></text></g><g><title>`0x7FFCAE0CD192 (5 samples, 0.01%)</title><rect x="71.0888%" y="341" width="0.0114%" height="15" fill="rgb(219,102,11)" fg:x="31208" fg:w="5"/><text x="71.3388%" y="351.50"></text></g><g><title>`0x7FFCAE0CD198 (95 samples, 0.22%)</title><rect x="71.1025%" y="341" width="0.2164%" height="15" fill="rgb(243,110,44)" fg:x="31214" fg:w="95"/><text x="71.3525%" y="351.50"></text></g><g><title>`0x7FFCAE0CD1A1 (14 samples, 0.03%)</title><rect x="71.3189%" y="341" width="0.0319%" height="15" fill="rgb(222,74,54)" fg:x="31309" fg:w="14"/><text x="71.5689%" y="351.50"></text></g><g><title>`0x7FFCAE0CD1A5 (6 samples, 0.01%)</title><rect x="71.3508%" y="341" width="0.0137%" height="15" fill="rgb(216,99,12)" fg:x="31323" fg:w="6"/><text x="71.6008%" y="351.50"></text></g><g><title>`0x7FFCAE12EC2C (82 samples, 0.19%)</title><rect x="71.3872%" y="325" width="0.1868%" height="15" fill="rgb(226,22,26)" fg:x="31339" fg:w="82"/><text x="71.6372%" y="335.50"></text></g><g><title>`0x7FFCAE12EC31 (11 samples, 0.03%)</title><rect x="71.5740%" y="325" width="0.0251%" height="15" fill="rgb(217,163,10)" fg:x="31421" fg:w="11"/><text x="71.8240%" y="335.50"></text></g><g><title>`0x7FFCAE12EC3B (10 samples, 0.02%)</title><rect x="71.6014%" y="325" width="0.0228%" height="15" fill="rgb(213,25,53)" fg:x="31433" fg:w="10"/><text x="71.8514%" y="335.50"></text></g><g><title>`0x7FFCAE12EC3E (12 samples, 0.03%)</title><rect x="71.6241%" y="325" width="0.0273%" height="15" fill="rgb(252,105,26)" fg:x="31443" fg:w="12"/><text x="71.8741%" y="335.50"></text></g><g><title>`0x7FFCAE12EC41 (5 samples, 0.01%)</title><rect x="71.6515%" y="325" width="0.0114%" height="15" fill="rgb(220,39,43)" fg:x="31455" fg:w="5"/><text x="71.9015%" y="335.50"></text></g><g><title>`0x7FFCAE12EC44 (7 samples, 0.02%)</title><rect x="71.6629%" y="325" width="0.0159%" height="15" fill="rgb(229,68,48)" fg:x="31460" fg:w="7"/><text x="71.9129%" y="335.50"></text></g><g><title>`0x7FFCAE12EC4B (104 samples, 0.24%)</title><rect x="71.6879%" y="325" width="0.2369%" height="15" fill="rgb(252,8,32)" fg:x="31471" fg:w="104"/><text x="71.9379%" y="335.50"></text></g><g><title>`0x7FFCAE12EC5B (5 samples, 0.01%)</title><rect x="71.9453%" y="325" width="0.0114%" height="15" fill="rgb(223,20,43)" fg:x="31584" fg:w="5"/><text x="72.1953%" y="335.50"></text></g><g><title>`0x7FFCAE12EC60 (5 samples, 0.01%)</title><rect x="71.9636%" y="325" width="0.0114%" height="15" fill="rgb(229,81,49)" fg:x="31592" fg:w="5"/><text x="72.2136%" y="335.50"></text></g><g><title>`0x7FFCAE12ECAE (13 samples, 0.03%)</title><rect x="71.9749%" y="325" width="0.0296%" height="15" fill="rgb(236,28,36)" fg:x="31597" fg:w="13"/><text x="72.2249%" y="335.50"></text></g><g><title>`0x7FFCAE12ECB2 (94 samples, 0.21%)</title><rect x="72.0046%" y="325" width="0.2141%" height="15" fill="rgb(249,185,26)" fg:x="31610" fg:w="94"/><text x="72.2546%" y="335.50"></text></g><g><title>`0x7FFCAE12ECB5 (6 samples, 0.01%)</title><rect x="72.2187%" y="325" width="0.0137%" height="15" fill="rgb(249,174,33)" fg:x="31704" fg:w="6"/><text x="72.4687%" y="335.50"></text></g><g><title>`0x7FFCAE12ECBE (9 samples, 0.02%)</title><rect x="72.2460%" y="325" width="0.0205%" height="15" fill="rgb(233,201,37)" fg:x="31716" fg:w="9"/><text x="72.4960%" y="335.50"></text></g><g><title>`0x7FFCAE12ECCE (5 samples, 0.01%)</title><rect x="72.2825%" y="325" width="0.0114%" height="15" fill="rgb(221,78,26)" fg:x="31732" fg:w="5"/><text x="72.5325%" y="335.50"></text></g><g><title>`0x7FFCAE12ECD1 (89 samples, 0.20%)</title><rect x="72.2938%" y="325" width="0.2027%" height="15" fill="rgb(250,127,30)" fg:x="31737" fg:w="89"/><text x="72.5438%" y="335.50"></text></g><g><title>`0x7FFCAE12ECD5 (9 samples, 0.02%)</title><rect x="72.5057%" y="325" width="0.0205%" height="15" fill="rgb(230,49,44)" fg:x="31830" fg:w="9"/><text x="72.7557%" y="335.50"></text></g><g><title>`0x7FFCAE12ECD8 (6 samples, 0.01%)</title><rect x="72.5262%" y="325" width="0.0137%" height="15" fill="rgb(229,67,23)" fg:x="31839" fg:w="6"/><text x="72.7762%" y="335.50"></text></g><g><title>`0x7FFCAE12ECDB (5 samples, 0.01%)</title><rect x="72.5399%" y="325" width="0.0114%" height="15" fill="rgb(249,83,47)" fg:x="31845" fg:w="5"/><text x="72.7899%" y="335.50"></text></g><g><title>`0x7FFCAE12ECE1 (83 samples, 0.19%)</title><rect x="72.5581%" y="325" width="0.1891%" height="15" fill="rgb(215,43,3)" fg:x="31853" fg:w="83"/><text x="72.8081%" y="335.50"></text></g><g><title>`0x7FFCAE12ECE6 (5 samples, 0.01%)</title><rect x="72.7472%" y="325" width="0.0114%" height="15" fill="rgb(238,154,13)" fg:x="31936" fg:w="5"/><text x="72.9972%" y="335.50"></text></g><g><title>`0x7FFCAE12ECE9 (5 samples, 0.01%)</title><rect x="72.7585%" y="325" width="0.0114%" height="15" fill="rgb(219,56,2)" fg:x="31941" fg:w="5"/><text x="73.0085%" y="335.50"></text></g><g><title>`0x7FFCAE12ECEB (7 samples, 0.02%)</title><rect x="72.7699%" y="325" width="0.0159%" height="15" fill="rgb(233,0,4)" fg:x="31946" fg:w="7"/><text x="73.0199%" y="335.50"></text></g><g><title>`0x7FFCAE12ECF5 (11 samples, 0.03%)</title><rect x="72.7973%" y="325" width="0.0251%" height="15" fill="rgb(235,30,7)" fg:x="31958" fg:w="11"/><text x="73.0473%" y="335.50"></text></g><g><title>`0x7FFCAE12ECF7 (83 samples, 0.19%)</title><rect x="72.8223%" y="325" width="0.1891%" height="15" fill="rgb(250,79,13)" fg:x="31969" fg:w="83"/><text x="73.0723%" y="335.50"></text></g><g><title>`0x7FFCAE12ECFC (7 samples, 0.02%)</title><rect x="73.0114%" y="325" width="0.0159%" height="15" fill="rgb(211,146,34)" fg:x="32052" fg:w="7"/><text x="73.2614%" y="335.50"></text></g><g><title>`0x7FFCAE12ECFF (6 samples, 0.01%)</title><rect x="73.0273%" y="325" width="0.0137%" height="15" fill="rgb(228,22,38)" fg:x="32059" fg:w="6"/><text x="73.2773%" y="335.50"></text></g><g><title>`0x7FFCAE12ED01 (6 samples, 0.01%)</title><rect x="73.0410%" y="325" width="0.0137%" height="15" fill="rgb(235,168,5)" fg:x="32065" fg:w="6"/><text x="73.2910%" y="335.50"></text></g><g><title>`0x7FFCAE12ED05 (6 samples, 0.01%)</title><rect x="73.0547%" y="325" width="0.0137%" height="15" fill="rgb(221,155,16)" fg:x="32071" fg:w="6"/><text x="73.3047%" y="335.50"></text></g><g><title>`0x7FFCAE12ED08 (10 samples, 0.02%)</title><rect x="73.0683%" y="325" width="0.0228%" height="15" fill="rgb(215,215,53)" fg:x="32077" fg:w="10"/><text x="73.3183%" y="335.50"></text></g><g><title>`0x7FFCAE12ED0C (6 samples, 0.01%)</title><rect x="73.0911%" y="325" width="0.0137%" height="15" fill="rgb(223,4,10)" fg:x="32087" fg:w="6"/><text x="73.3411%" y="335.50"></text></g><g><title>`0x7FFCAE12ED11 (11 samples, 0.03%)</title><rect x="73.1048%" y="325" width="0.0251%" height="15" fill="rgb(234,103,6)" fg:x="32093" fg:w="11"/><text x="73.3548%" y="335.50"></text></g><g><title>`0x7FFCAE12ED15 (97 samples, 0.22%)</title><rect x="73.1298%" y="325" width="0.2210%" height="15" fill="rgb(227,97,0)" fg:x="32104" fg:w="97"/><text x="73.3798%" y="335.50"></text></g><g><title>`0x7FFCAE12ED19 (5 samples, 0.01%)</title><rect x="73.3508%" y="325" width="0.0114%" height="15" fill="rgb(234,150,53)" fg:x="32201" fg:w="5"/><text x="73.6008%" y="335.50"></text></g><g><title>`0x7FFCAE0CD1AA (885 samples, 2.02%)</title><rect x="71.3645%" y="341" width="2.0159%" height="15" fill="rgb(228,201,54)" fg:x="31329" fg:w="885"/><text x="71.6145%" y="351.50">`..</text></g><g><title>`0x7FFCAE12ED1D (8 samples, 0.02%)</title><rect x="73.3622%" y="325" width="0.0182%" height="15" fill="rgb(222,22,37)" fg:x="32206" fg:w="8"/><text x="73.6122%" y="335.50"></text></g><g><title>`0x7FFCAE0CD1AF (8 samples, 0.02%)</title><rect x="73.3804%" y="341" width="0.0182%" height="15" fill="rgb(237,53,32)" fg:x="32214" fg:w="8"/><text x="73.6304%" y="351.50"></text></g><g><title>`0x7FFCAE0CD1B4 (5 samples, 0.01%)</title><rect x="73.4077%" y="341" width="0.0114%" height="15" fill="rgb(233,25,53)" fg:x="32226" fg:w="5"/><text x="73.6577%" y="351.50"></text></g><g><title>`0x7FFCAE0CD1B7 (12 samples, 0.03%)</title><rect x="73.4191%" y="341" width="0.0273%" height="15" fill="rgb(210,40,34)" fg:x="32231" fg:w="12"/><text x="73.6691%" y="351.50"></text></g><g><title>`0x7FFCAE0CD1B9 (105 samples, 0.24%)</title><rect x="73.4465%" y="341" width="0.2392%" height="15" fill="rgb(241,220,44)" fg:x="32243" fg:w="105"/><text x="73.6965%" y="351.50"></text></g><g><title>`0x7FFCAE0CD1BC (8 samples, 0.02%)</title><rect x="73.6856%" y="341" width="0.0182%" height="15" fill="rgb(235,28,35)" fg:x="32348" fg:w="8"/><text x="73.9356%" y="351.50"></text></g><g><title>`0x7FFCAE0CD1C1 (10 samples, 0.02%)</title><rect x="73.7107%" y="341" width="0.0228%" height="15" fill="rgb(210,56,17)" fg:x="32359" fg:w="10"/><text x="73.9607%" y="351.50"></text></g><g><title>`0x7FFCAE0CD1C5 (5 samples, 0.01%)</title><rect x="73.7335%" y="341" width="0.0114%" height="15" fill="rgb(224,130,29)" fg:x="32369" fg:w="5"/><text x="73.9835%" y="351.50"></text></g><g><title>`0x7FFCAE0CD1CF (17 samples, 0.04%)</title><rect x="73.7540%" y="341" width="0.0387%" height="15" fill="rgb(235,212,8)" fg:x="32378" fg:w="17"/><text x="74.0040%" y="351.50"></text></g><g><title>`0x7FFCAE0CD1D2 (98 samples, 0.22%)</title><rect x="73.7927%" y="341" width="0.2232%" height="15" fill="rgb(223,33,50)" fg:x="32395" fg:w="98"/><text x="74.0427%" y="351.50"></text></g><g><title>`0x7FFCAE0CD1D6 (6 samples, 0.01%)</title><rect x="74.0159%" y="341" width="0.0137%" height="15" fill="rgb(219,149,13)" fg:x="32493" fg:w="6"/><text x="74.2659%" y="351.50"></text></g><g><title>`0x7FFCAE0CD1DD (11 samples, 0.03%)</title><rect x="74.0387%" y="341" width="0.0251%" height="15" fill="rgb(250,156,29)" fg:x="32503" fg:w="11"/><text x="74.2887%" y="351.50"></text></g><g><title>`0x7FFCAE0CD1E0 (5 samples, 0.01%)</title><rect x="74.0638%" y="341" width="0.0114%" height="15" fill="rgb(216,193,19)" fg:x="32514" fg:w="5"/><text x="74.3138%" y="351.50"></text></g><g><title>`0x7FFCAE0CD1E3 (7 samples, 0.02%)</title><rect x="74.0752%" y="341" width="0.0159%" height="15" fill="rgb(216,135,14)" fg:x="32519" fg:w="7"/><text x="74.3252%" y="351.50"></text></g><g><title>`0x7FFCAE0CD1E7 (14 samples, 0.03%)</title><rect x="74.0911%" y="341" width="0.0319%" height="15" fill="rgb(241,47,5)" fg:x="32526" fg:w="14"/><text x="74.3411%" y="351.50"></text></g><g><title>`0x7FFCAE0CD1ED (12 samples, 0.03%)</title><rect x="74.1230%" y="341" width="0.0273%" height="15" fill="rgb(233,42,35)" fg:x="32540" fg:w="12"/><text x="74.3730%" y="351.50"></text></g><g><title>`0x7FFCAE0CD1F2 (91 samples, 0.21%)</title><rect x="74.1503%" y="341" width="0.2073%" height="15" fill="rgb(231,13,6)" fg:x="32552" fg:w="91"/><text x="74.4003%" y="351.50"></text></g><g><title>`0x7FFCAE0CD1FB (5 samples, 0.01%)</title><rect x="74.3622%" y="341" width="0.0114%" height="15" fill="rgb(207,181,40)" fg:x="32645" fg:w="5"/><text x="74.6122%" y="351.50"></text></g><g><title>`0x7FFCAE0CD209 (8 samples, 0.02%)</title><rect x="74.3781%" y="341" width="0.0182%" height="15" fill="rgb(254,173,49)" fg:x="32652" fg:w="8"/><text x="74.6281%" y="351.50"></text></g><g><title>`0x7FFCAE0CD20F (6 samples, 0.01%)</title><rect x="74.3964%" y="341" width="0.0137%" height="15" fill="rgb(221,1,38)" fg:x="32660" fg:w="6"/><text x="74.6464%" y="351.50"></text></g><g><title>`0x7FFCAE0CD21C (5 samples, 0.01%)</title><rect x="74.4169%" y="341" width="0.0114%" height="15" fill="rgb(206,124,46)" fg:x="32669" fg:w="5"/><text x="74.6669%" y="351.50"></text></g><g><title>`0x7FFCAE0CD21F (12 samples, 0.03%)</title><rect x="74.4282%" y="341" width="0.0273%" height="15" fill="rgb(249,21,11)" fg:x="32674" fg:w="12"/><text x="74.6782%" y="351.50"></text></g><g><title>`0x7FFCAE0CD223 (5 samples, 0.01%)</title><rect x="74.4556%" y="341" width="0.0114%" height="15" fill="rgb(222,201,40)" fg:x="32686" fg:w="5"/><text x="74.7056%" y="351.50"></text></g><g><title>`0x7FFCAE0CD229 (99 samples, 0.23%)</title><rect x="74.4670%" y="341" width="0.2255%" height="15" fill="rgb(235,61,29)" fg:x="32691" fg:w="99"/><text x="74.7170%" y="351.50"></text></g><g><title>`0x7FFCAE0CD231 (5 samples, 0.01%)</title><rect x="74.6970%" y="341" width="0.0114%" height="15" fill="rgb(219,207,3)" fg:x="32792" fg:w="5"/><text x="74.9470%" y="351.50"></text></g><g><title>`0x7FFCAE0CD235 (10 samples, 0.02%)</title><rect x="74.7084%" y="341" width="0.0228%" height="15" fill="rgb(222,56,46)" fg:x="32797" fg:w="10"/><text x="74.9584%" y="351.50"></text></g><g><title>`0x7FFCAE0CD241 (99 samples, 0.23%)</title><rect x="74.7517%" y="341" width="0.2255%" height="15" fill="rgb(239,76,54)" fg:x="32816" fg:w="99"/><text x="75.0017%" y="351.50"></text></g><g><title>`0x7FFCAE0CD244 (7 samples, 0.02%)</title><rect x="74.9841%" y="341" width="0.0159%" height="15" fill="rgb(231,124,27)" fg:x="32918" fg:w="7"/><text x="75.2341%" y="351.50"></text></g><g><title>`0x7FFCAE0CD245 (6 samples, 0.01%)</title><rect x="75.0000%" y="341" width="0.0137%" height="15" fill="rgb(249,195,6)" fg:x="32925" fg:w="6"/><text x="75.2500%" y="351.50"></text></g><g><title>`0x7FFCAE0D17A6 (11 samples, 0.03%)</title><rect x="75.0364%" y="325" width="0.0251%" height="15" fill="rgb(237,174,47)" fg:x="32941" fg:w="11"/><text x="75.2864%" y="335.50"></text></g><g><title>`0x7FFCAE0D17C3 (533 samples, 1.21%)</title><rect x="75.0638%" y="325" width="1.2141%" height="15" fill="rgb(206,201,31)" fg:x="32953" fg:w="533"/><text x="75.3138%" y="335.50"></text></g><g><title>`0x7FFCAE0D17EA (13 samples, 0.03%)</title><rect x="76.2938%" y="325" width="0.0296%" height="15" fill="rgb(231,57,52)" fg:x="33493" fg:w="13"/><text x="76.5438%" y="335.50"></text></g><g><title>`0x7FFCAE0CC7BA (6,464 samples, 14.72%)</title><rect x="61.6014%" y="357" width="14.7244%" height="15" fill="rgb(248,177,22)" fg:x="27043" fg:w="6464"/><text x="61.8514%" y="367.50">`0x7FFCAE0CC7BA</text></g><g><title>`0x7FFCAE0CD2E3 (576 samples, 1.31%)</title><rect x="75.0137%" y="341" width="1.3121%" height="15" fill="rgb(215,211,37)" fg:x="32931" fg:w="576"/><text x="75.2637%" y="351.50"></text></g><g><title>`0x7FFCAE0CC7BD (6 samples, 0.01%)</title><rect x="76.3257%" y="357" width="0.0137%" height="15" fill="rgb(241,128,51)" fg:x="33507" fg:w="6"/><text x="76.5757%" y="367.50"></text></g><g><title>`0x7FFCAE0CC7C0 (5 samples, 0.01%)</title><rect x="76.3394%" y="357" width="0.0114%" height="15" fill="rgb(227,165,31)" fg:x="33513" fg:w="5"/><text x="76.5894%" y="367.50"></text></g><g><title>`0x7FFCAE0CC7C6 (96 samples, 0.22%)</title><rect x="76.3508%" y="357" width="0.2187%" height="15" fill="rgb(228,167,24)" fg:x="33518" fg:w="96"/><text x="76.6008%" y="367.50"></text></g><g><title>`0x7FFCAE0CC7C9 (8 samples, 0.02%)</title><rect x="76.5695%" y="357" width="0.0182%" height="15" fill="rgb(228,143,12)" fg:x="33614" fg:w="8"/><text x="76.8195%" y="367.50"></text></g><g><title>`0x7FFCAE0CC7CB (6 samples, 0.01%)</title><rect x="76.5877%" y="357" width="0.0137%" height="15" fill="rgb(249,149,8)" fg:x="33622" fg:w="6"/><text x="76.8377%" y="367.50"></text></g><g><title>`0x7FFCAE0CC7D1 (6 samples, 0.01%)</title><rect x="76.6014%" y="357" width="0.0137%" height="15" fill="rgb(243,35,44)" fg:x="33628" fg:w="6"/><text x="76.8514%" y="367.50"></text></g><g><title>`0x7FFCAE0CC7E1 (5 samples, 0.01%)</title><rect x="76.6196%" y="357" width="0.0114%" height="15" fill="rgb(246,89,9)" fg:x="33636" fg:w="5"/><text x="76.8696%" y="367.50"></text></g><g><title>`0x7FFCAE0CC7EA (8 samples, 0.02%)</title><rect x="76.6333%" y="357" width="0.0182%" height="15" fill="rgb(233,213,13)" fg:x="33642" fg:w="8"/><text x="76.8833%" y="367.50"></text></g><g><title>`0x7FFCAE0CC7F2 (5 samples, 0.01%)</title><rect x="76.6583%" y="357" width="0.0114%" height="15" fill="rgb(233,141,41)" fg:x="33653" fg:w="5"/><text x="76.9083%" y="367.50"></text></g><g><title>`0x7FFCAE0CC7FE (89 samples, 0.20%)</title><rect x="76.6788%" y="357" width="0.2027%" height="15" fill="rgb(239,167,4)" fg:x="33662" fg:w="89"/><text x="76.9288%" y="367.50"></text></g><g><title>`0x7FFCAE0CC806 (6 samples, 0.01%)</title><rect x="76.8884%" y="357" width="0.0137%" height="15" fill="rgb(209,217,16)" fg:x="33754" fg:w="6"/><text x="77.1384%" y="367.50"></text></g><g><title>`0x7FFCAE0CC80E (8 samples, 0.02%)</title><rect x="76.9021%" y="357" width="0.0182%" height="15" fill="rgb(219,88,35)" fg:x="33760" fg:w="8"/><text x="77.1521%" y="367.50"></text></g><g><title>`0x7FFCAE0CC81C (5 samples, 0.01%)</title><rect x="76.9476%" y="357" width="0.0114%" height="15" fill="rgb(220,193,23)" fg:x="33780" fg:w="5"/><text x="77.1976%" y="367.50"></text></g><g><title>`0x7FFCAE0CC81E (93 samples, 0.21%)</title><rect x="76.9590%" y="357" width="0.2118%" height="15" fill="rgb(230,90,52)" fg:x="33785" fg:w="93"/><text x="77.2090%" y="367.50"></text></g><g><title>`0x7FFCAE0CC820 (6 samples, 0.01%)</title><rect x="77.1708%" y="357" width="0.0137%" height="15" fill="rgb(252,106,19)" fg:x="33878" fg:w="6"/><text x="77.4208%" y="367.50"></text></g><g><title>`0x7FFCAE0CC822 (6 samples, 0.01%)</title><rect x="77.1936%" y="357" width="0.0137%" height="15" fill="rgb(206,74,20)" fg:x="33888" fg:w="6"/><text x="77.4436%" y="367.50"></text></g><g><title>block.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (11,221 samples, 25.56%)</title><rect x="51.9385%" y="485" width="25.5604%" height="15" fill="rgb(230,138,44)" fg:x="22801" fg:w="11221"/><text x="52.1885%" y="495.50">block.exe`alloc::vec::impl$8::deref(alloc..</text></g><g><title>block.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::as_ptr (10,972 samples, 24.99%)</title><rect x="52.5057%" y="469" width="24.9932%" height="15" fill="rgb(235,182,43)" fg:x="23050" fg:w="10972"/><text x="52.7557%" y="479.50">block.exe`alloc::vec::Vec&lt;u8,alloc::allo..</text></g><g><title>block.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::ptr (10,972 samples, 24.99%)</title><rect x="52.5057%" y="453" width="24.9932%" height="15" fill="rgb(242,16,51)" fg:x="23050" fg:w="10972"/><text x="52.7557%" y="463.50">block.exe`alloc::raw_vec::RawVec&lt;u8,allo..</text></g><g><title>block.exe`block::block::Block&lt;block::Data&gt;::to_bytes&lt;block::Data&gt; (10,966 samples, 24.98%)</title><rect x="52.5194%" y="437" width="24.9795%" height="15" fill="rgb(248,9,4)" fg:x="23056" fg:w="10966"/><text x="52.7694%" y="447.50">block.exe`block::block::Block&lt;block::Dat..</text></g><g><title>block.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::with_capacity (8,552 samples, 19.48%)</title><rect x="58.0182%" y="421" width="19.4806%" height="15" fill="rgb(210,31,22)" fg:x="25470" fg:w="8552"/><text x="58.2682%" y="431.50">block.exe`alloc::vec::Vec&lt;u8,al..</text></g><g><title>block.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::with_capacity_in (8,552 samples, 19.48%)</title><rect x="58.0182%" y="405" width="19.4806%" height="15" fill="rgb(239,54,39)" fg:x="25470" fg:w="8552"/><text x="58.2682%" y="415.50">block.exe`alloc::vec::Vec&lt;u8,al..</text></g><g><title>block.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::with_capacity_in (8,451 samples, 19.25%)</title><rect x="58.2483%" y="389" width="19.2506%" height="15" fill="rgb(230,99,41)" fg:x="25571" fg:w="8451"/><text x="58.4983%" y="399.50">block.exe`alloc::raw_vec::RawV..</text></g><g><title>block.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::allocate_in (8,451 samples, 19.25%)</title><rect x="58.2483%" y="373" width="19.2506%" height="15" fill="rgb(253,106,12)" fg:x="25571" fg:w="8451"/><text x="58.4983%" y="383.50">block.exe`alloc::raw_vec::RawV..</text></g><g><title>block.exe`alloc::alloc::impl$1::allocate (124 samples, 0.28%)</title><rect x="77.2164%" y="357" width="0.2825%" height="15" fill="rgb(213,46,41)" fg:x="33898" fg:w="124"/><text x="77.4664%" y="367.50"></text></g><g><title>block.exe`alloc::alloc::Global::alloc_impl (124 samples, 0.28%)</title><rect x="77.2164%" y="341" width="0.2825%" height="15" fill="rgb(215,133,35)" fg:x="33898" fg:w="124"/><text x="77.4664%" y="351.50"></text></g><g><title>block.exe`alloc::alloc::alloc (124 samples, 0.28%)</title><rect x="77.2164%" y="325" width="0.2825%" height="15" fill="rgb(213,28,5)" fg:x="33898" fg:w="124"/><text x="77.4664%" y="335.50"></text></g><g><title>block.exe`std::alloc::__default_lib_allocator::__rdl_alloc (120 samples, 0.27%)</title><rect x="77.2255%" y="309" width="0.2733%" height="15" fill="rgb(215,77,49)" fg:x="33902" fg:w="120"/><text x="77.4755%" y="319.50"></text></g><g><title>block.exe`std::sys::windows::alloc::impl$0::alloc (120 samples, 0.27%)</title><rect x="77.2255%" y="293" width="0.2733%" height="15" fill="rgb(248,100,22)" fg:x="33902" fg:w="120"/><text x="77.4755%" y="303.50"></text></g><g><title>block.exe`std::sys::windows::alloc::allocate (120 samples, 0.27%)</title><rect x="77.2255%" y="277" width="0.2733%" height="15" fill="rgb(208,67,9)" fg:x="33902" fg:w="120"/><text x="77.4755%" y="287.50"></text></g><g><title>block.exe`std::sys::windows::alloc::init_or_get_process_heap (104 samples, 0.24%)</title><rect x="77.2620%" y="261" width="0.2369%" height="15" fill="rgb(219,133,21)" fg:x="33918" fg:w="104"/><text x="77.5120%" y="271.50"></text></g><g><title>block.exe`core::sync::atomic::AtomicPtr::load (97 samples, 0.22%)</title><rect x="77.2779%" y="245" width="0.2210%" height="15" fill="rgb(246,46,29)" fg:x="33925" fg:w="97"/><text x="77.5279%" y="255.50"></text></g><g><title>block.exe`core::sync::atomic::atomic_load (97 samples, 0.22%)</title><rect x="77.2779%" y="229" width="0.2210%" height="15" fill="rgb(246,185,52)" fg:x="33925" fg:w="97"/><text x="77.5279%" y="239.50"></text></g><g><title>`0x7FFCACFC0D10 (114 samples, 0.26%)</title><rect x="77.5535%" y="373" width="0.2597%" height="15" fill="rgb(252,136,11)" fg:x="34046" fg:w="114"/><text x="77.8035%" y="383.50"></text></g><g><title>`0x7FFCAE0CAAC0 (20 samples, 0.05%)</title><rect x="77.8132%" y="373" width="0.0456%" height="15" fill="rgb(219,138,53)" fg:x="34160" fg:w="20"/><text x="78.0632%" y="383.50"></text></g><g><title>`0x7FFCAE0CAAC5 (5 samples, 0.01%)</title><rect x="77.8588%" y="373" width="0.0114%" height="15" fill="rgb(211,51,23)" fg:x="34180" fg:w="5"/><text x="78.1088%" y="383.50"></text></g><g><title>`0x7FFCAE0CAACB (6 samples, 0.01%)</title><rect x="77.8793%" y="373" width="0.0137%" height="15" fill="rgb(247,221,28)" fg:x="34189" fg:w="6"/><text x="78.1293%" y="383.50"></text></g><g><title>`0x7FFCAE0CAACF (8 samples, 0.02%)</title><rect x="77.8929%" y="373" width="0.0182%" height="15" fill="rgb(251,222,45)" fg:x="34195" fg:w="8"/><text x="78.1429%" y="383.50"></text></g><g><title>`0x7FFCAE0CAAD4 (94 samples, 0.21%)</title><rect x="77.9180%" y="373" width="0.2141%" height="15" fill="rgb(217,162,53)" fg:x="34206" fg:w="94"/><text x="78.1680%" y="383.50"></text></g><g><title>`0x7FFCAE0CAAD7 (8 samples, 0.02%)</title><rect x="78.1321%" y="373" width="0.0182%" height="15" fill="rgb(229,93,14)" fg:x="34300" fg:w="8"/><text x="78.3821%" y="383.50"></text></g><g><title>`0x7FFCAE0CAADC (7 samples, 0.02%)</title><rect x="78.1526%" y="373" width="0.0159%" height="15" fill="rgb(209,67,49)" fg:x="34309" fg:w="7"/><text x="78.4026%" y="383.50"></text></g><g><title>`0x7FFCAE0CAAE5 (5 samples, 0.01%)</title><rect x="78.1731%" y="373" width="0.0114%" height="15" fill="rgb(213,87,29)" fg:x="34318" fg:w="5"/><text x="78.4231%" y="383.50"></text></g><g><title>`0x7FFCAE0CAAEC (13 samples, 0.03%)</title><rect x="78.1845%" y="373" width="0.0296%" height="15" fill="rgb(205,151,52)" fg:x="34323" fg:w="13"/><text x="78.4345%" y="383.50"></text></g><g><title>`0x7FFCAE0CAAEF (6 samples, 0.01%)</title><rect x="78.2141%" y="373" width="0.0137%" height="15" fill="rgb(253,215,39)" fg:x="34336" fg:w="6"/><text x="78.4641%" y="383.50"></text></g><g><title>`0x7FFCAE0CAAF5 (5 samples, 0.01%)</title><rect x="78.2301%" y="373" width="0.0114%" height="15" fill="rgb(221,220,41)" fg:x="34343" fg:w="5"/><text x="78.4801%" y="383.50"></text></g><g><title>`0x7FFCAE0CAAF7 (112 samples, 0.26%)</title><rect x="78.2415%" y="373" width="0.2551%" height="15" fill="rgb(218,133,21)" fg:x="34348" fg:w="112"/><text x="78.4915%" y="383.50"></text></g><g><title>`0x7FFCAE0CAAFE (6 samples, 0.01%)</title><rect x="78.4966%" y="373" width="0.0137%" height="15" fill="rgb(221,193,43)" fg:x="34460" fg:w="6"/><text x="78.7466%" y="383.50"></text></g><g><title>`0x7FFCAE0CB680 (116 samples, 0.26%)</title><rect x="78.5239%" y="357" width="0.2642%" height="15" fill="rgb(240,128,52)" fg:x="34472" fg:w="116"/><text x="78.7739%" y="367.50"></text></g><g><title>`0x7FFCAE0CB685 (5 samples, 0.01%)</title><rect x="78.7882%" y="357" width="0.0114%" height="15" fill="rgb(253,114,12)" fg:x="34588" fg:w="5"/><text x="79.0382%" y="367.50"></text></g><g><title>`0x7FFCAE0CB698 (100 samples, 0.23%)</title><rect x="78.8337%" y="357" width="0.2278%" height="15" fill="rgb(215,223,47)" fg:x="34608" fg:w="100"/><text x="79.0837%" y="367.50"></text></g><g><title>`0x7FFCAE0CB69F (6 samples, 0.01%)</title><rect x="79.0615%" y="357" width="0.0137%" height="15" fill="rgb(248,225,23)" fg:x="34708" fg:w="6"/><text x="79.3115%" y="367.50"></text></g><g><title>`0x7FFCAE0CB6AE (8 samples, 0.02%)</title><rect x="79.0934%" y="357" width="0.0182%" height="15" fill="rgb(250,108,0)" fg:x="34722" fg:w="8"/><text x="79.3434%" y="367.50"></text></g><g><title>`0x7FFCAE0CB6B1 (5 samples, 0.01%)</title><rect x="79.1116%" y="357" width="0.0114%" height="15" fill="rgb(228,208,7)" fg:x="34730" fg:w="5"/><text x="79.3616%" y="367.50"></text></g><g><title>`0x7FFCAE0CB6B4 (5 samples, 0.01%)</title><rect x="79.1230%" y="357" width="0.0114%" height="15" fill="rgb(244,45,10)" fg:x="34735" fg:w="5"/><text x="79.3730%" y="367.50"></text></g><g><title>`0x7FFCAE0CB6B6 (102 samples, 0.23%)</title><rect x="79.1344%" y="357" width="0.2323%" height="15" fill="rgb(207,125,25)" fg:x="34740" fg:w="102"/><text x="79.3844%" y="367.50"></text></g><g><title>`0x7FFCAE0CBAB1 (83 samples, 0.19%)</title><rect x="79.3667%" y="357" width="0.1891%" height="15" fill="rgb(210,195,18)" fg:x="34842" fg:w="83"/><text x="79.6167%" y="367.50"></text></g><g><title>`0x7FFCAE0CBABF (5 samples, 0.01%)</title><rect x="79.5695%" y="357" width="0.0114%" height="15" fill="rgb(249,80,12)" fg:x="34931" fg:w="5"/><text x="79.8195%" y="367.50"></text></g><g><title>`0x7FFCAE0CBAC3 (9 samples, 0.02%)</title><rect x="79.5809%" y="357" width="0.0205%" height="15" fill="rgb(221,65,9)" fg:x="34936" fg:w="9"/><text x="79.8309%" y="367.50"></text></g><g><title>`0x7FFCAE0CBACE (86 samples, 0.20%)</title><rect x="79.6241%" y="357" width="0.1959%" height="15" fill="rgb(235,49,36)" fg:x="34955" fg:w="86"/><text x="79.8741%" y="367.50"></text></g><g><title>`0x7FFCAE0CBAD0 (6 samples, 0.01%)</title><rect x="79.8200%" y="357" width="0.0137%" height="15" fill="rgb(225,32,20)" fg:x="35041" fg:w="6"/><text x="80.0700%" y="367.50"></text></g><g><title>`0x7FFCAE0CBAD2 (7 samples, 0.02%)</title><rect x="79.8337%" y="357" width="0.0159%" height="15" fill="rgb(215,141,46)" fg:x="35047" fg:w="7"/><text x="80.0837%" y="367.50"></text></g><g><title>`0x7FFCAE0CBAD3 (6 samples, 0.01%)</title><rect x="79.8497%" y="357" width="0.0137%" height="15" fill="rgb(250,160,47)" fg:x="35054" fg:w="6"/><text x="80.0997%" y="367.50"></text></g><g><title>`0x7FFCAE0CBDC4 (7 samples, 0.02%)</title><rect x="79.8633%" y="357" width="0.0159%" height="15" fill="rgb(216,222,40)" fg:x="35060" fg:w="7"/><text x="80.1133%" y="367.50"></text></g><g><title>`0x7FFCAE0CBDCB (6 samples, 0.01%)</title><rect x="79.8793%" y="357" width="0.0137%" height="15" fill="rgb(234,217,39)" fg:x="35067" fg:w="6"/><text x="80.1293%" y="367.50"></text></g><g><title>`0x7FFCAE0CBDD7 (5 samples, 0.01%)</title><rect x="79.9089%" y="357" width="0.0114%" height="15" fill="rgb(207,178,40)" fg:x="35080" fg:w="5"/><text x="80.1589%" y="367.50"></text></g><g><title>`0x7FFCAE0CBDDB (7 samples, 0.02%)</title><rect x="79.9203%" y="357" width="0.0159%" height="15" fill="rgb(221,136,13)" fg:x="35085" fg:w="7"/><text x="80.1703%" y="367.50"></text></g><g><title>`0x7FFCAE0CBE05 (10 samples, 0.02%)</title><rect x="79.9362%" y="357" width="0.0228%" height="15" fill="rgb(249,199,10)" fg:x="35092" fg:w="10"/><text x="80.1862%" y="367.50"></text></g><g><title>`0x7FFCAE0CBE12 (6 samples, 0.01%)</title><rect x="79.9681%" y="357" width="0.0137%" height="15" fill="rgb(249,222,13)" fg:x="35106" fg:w="6"/><text x="80.2181%" y="367.50"></text></g><g><title>`0x7FFCAE0CBE16 (100 samples, 0.23%)</title><rect x="79.9818%" y="357" width="0.2278%" height="15" fill="rgb(244,185,38)" fg:x="35112" fg:w="100"/><text x="80.2318%" y="367.50"></text></g><g><title>`0x7FFCAE0CBE2A (6 samples, 0.01%)</title><rect x="80.2323%" y="357" width="0.0137%" height="15" fill="rgb(236,202,9)" fg:x="35222" fg:w="6"/><text x="80.4823%" y="367.50"></text></g><g><title>`0x7FFCAE0CBE4F (6 samples, 0.01%)</title><rect x="80.2460%" y="357" width="0.0137%" height="15" fill="rgb(250,229,37)" fg:x="35228" fg:w="6"/><text x="80.4960%" y="367.50"></text></g><g><title>`0x7FFCAE0CBE57 (75 samples, 0.17%)</title><rect x="80.2597%" y="357" width="0.1708%" height="15" fill="rgb(206,174,23)" fg:x="35234" fg:w="75"/><text x="80.5097%" y="367.50"></text></g><g><title>`0x7FFCAE0CBE5A (5 samples, 0.01%)</title><rect x="80.4305%" y="357" width="0.0114%" height="15" fill="rgb(211,33,43)" fg:x="35309" fg:w="5"/><text x="80.6805%" y="367.50"></text></g><g><title>`0x7FFCAE0CBE62 (6 samples, 0.01%)</title><rect x="80.4510%" y="357" width="0.0137%" height="15" fill="rgb(245,58,50)" fg:x="35318" fg:w="6"/><text x="80.7010%" y="367.50"></text></g><g><title>`0x7FFCAE0CBE68 (5 samples, 0.01%)</title><rect x="80.4647%" y="357" width="0.0114%" height="15" fill="rgb(244,68,36)" fg:x="35324" fg:w="5"/><text x="80.7147%" y="367.50"></text></g><g><title>`0x7FFCAE0CBE6B (8 samples, 0.02%)</title><rect x="80.4761%" y="357" width="0.0182%" height="15" fill="rgb(232,229,15)" fg:x="35329" fg:w="8"/><text x="80.7261%" y="367.50"></text></g><g><title>`0x7FFCAE0CAB80 (102 samples, 0.23%)</title><rect x="80.5080%" y="341" width="0.2323%" height="15" fill="rgb(254,30,23)" fg:x="35343" fg:w="102"/><text x="80.7580%" y="351.50"></text></g><g><title>`0x7FFCAE0CAB84 (14 samples, 0.03%)</title><rect x="80.7403%" y="341" width="0.0319%" height="15" fill="rgb(235,160,14)" fg:x="35445" fg:w="14"/><text x="80.9903%" y="351.50"></text></g><g><title>`0x7FFCAE0CAB8A (5 samples, 0.01%)</title><rect x="80.7722%" y="341" width="0.0114%" height="15" fill="rgb(212,155,44)" fg:x="35459" fg:w="5"/><text x="81.0222%" y="351.50"></text></g><g><title>`0x7FFCAE0CAB8D (7 samples, 0.02%)</title><rect x="80.7836%" y="341" width="0.0159%" height="15" fill="rgb(226,2,50)" fg:x="35464" fg:w="7"/><text x="81.0336%" y="351.50"></text></g><g><title>`0x7FFCAE0CAB8F (6 samples, 0.01%)</title><rect x="80.7995%" y="341" width="0.0137%" height="15" fill="rgb(234,177,6)" fg:x="35471" fg:w="6"/><text x="81.0495%" y="351.50"></text></g><g><title>`0x7FFCAE0CAB95 (6 samples, 0.01%)</title><rect x="80.8132%" y="341" width="0.0137%" height="15" fill="rgb(217,24,9)" fg:x="35477" fg:w="6"/><text x="81.0632%" y="351.50"></text></g><g><title>`0x7FFCAE0CBE70 (154 samples, 0.35%)</title><rect x="80.4943%" y="357" width="0.3508%" height="15" fill="rgb(220,13,46)" fg:x="35337" fg:w="154"/><text x="80.7443%" y="367.50"></text></g><g><title>`0x7FFCAE0CBE7D (6 samples, 0.01%)</title><rect x="80.8474%" y="357" width="0.0137%" height="15" fill="rgb(239,221,27)" fg:x="35492" fg:w="6"/><text x="81.0974%" y="367.50"></text></g><g><title>`0x7FFCAE0CBE89 (98 samples, 0.22%)</title><rect x="80.8656%" y="357" width="0.2232%" height="15" fill="rgb(222,198,25)" fg:x="35500" fg:w="98"/><text x="81.1156%" y="367.50"></text></g><g><title>`0x7FFCAE0CBE91 (6 samples, 0.01%)</title><rect x="81.0979%" y="357" width="0.0137%" height="15" fill="rgb(211,99,13)" fg:x="35602" fg:w="6"/><text x="81.3479%" y="367.50"></text></g><g><title>`0x7FFCAE0CBEA6 (7 samples, 0.02%)</title><rect x="81.1116%" y="357" width="0.0159%" height="15" fill="rgb(232,111,31)" fg:x="35608" fg:w="7"/><text x="81.3616%" y="367.50"></text></g><g><title>`0x7FFCAE13BF43 (10 samples, 0.02%)</title><rect x="81.1367%" y="357" width="0.0228%" height="15" fill="rgb(245,82,37)" fg:x="35619" fg:w="10"/><text x="81.3867%" y="367.50"></text></g><g><title>`0x7FFCAE13BF4A (6 samples, 0.01%)</title><rect x="81.1595%" y="357" width="0.0137%" height="15" fill="rgb(227,149,46)" fg:x="35629" fg:w="6"/><text x="81.4095%" y="367.50"></text></g><g><title>`0x7FFCAE13BF51 (8 samples, 0.02%)</title><rect x="81.1822%" y="357" width="0.0182%" height="15" fill="rgb(218,36,50)" fg:x="35639" fg:w="8"/><text x="81.4322%" y="367.50"></text></g><g><title>`0x7FFCAE13BF54 (93 samples, 0.21%)</title><rect x="81.2005%" y="357" width="0.2118%" height="15" fill="rgb(226,80,48)" fg:x="35647" fg:w="93"/><text x="81.4505%" y="367.50"></text></g><g><title>`0x7FFCAE13BF57 (5 samples, 0.01%)</title><rect x="81.4123%" y="357" width="0.0114%" height="15" fill="rgb(238,224,15)" fg:x="35740" fg:w="5"/><text x="81.6623%" y="367.50"></text></g><g><title>`0x7FFCAE13BF5A (5 samples, 0.01%)</title><rect x="81.4237%" y="357" width="0.0114%" height="15" fill="rgb(241,136,10)" fg:x="35745" fg:w="5"/><text x="81.6737%" y="367.50"></text></g><g><title>`0x7FFCAE13BF63 (5 samples, 0.01%)</title><rect x="81.4396%" y="357" width="0.0114%" height="15" fill="rgb(208,32,45)" fg:x="35752" fg:w="5"/><text x="81.6896%" y="367.50"></text></g><g><title>`0x7FFCAE13BF70 (8 samples, 0.02%)</title><rect x="81.4647%" y="357" width="0.0182%" height="15" fill="rgb(207,135,9)" fg:x="35763" fg:w="8"/><text x="81.7147%" y="367.50"></text></g><g><title>`0x7FFCAE13BF75 (93 samples, 0.21%)</title><rect x="81.4829%" y="357" width="0.2118%" height="15" fill="rgb(206,86,44)" fg:x="35771" fg:w="93"/><text x="81.7329%" y="367.50"></text></g><g><title>`0x7FFCAE13BF81 (8 samples, 0.02%)</title><rect x="81.7062%" y="357" width="0.0182%" height="15" fill="rgb(245,177,15)" fg:x="35869" fg:w="8"/><text x="81.9562%" y="367.50"></text></g><g><title>`0x7FFCAE13BF88 (6 samples, 0.01%)</title><rect x="81.7289%" y="357" width="0.0137%" height="15" fill="rgb(206,64,50)" fg:x="35879" fg:w="6"/><text x="81.9789%" y="367.50"></text></g><g><title>`0x7FFCAE13BF91 (6 samples, 0.01%)</title><rect x="81.7494%" y="357" width="0.0137%" height="15" fill="rgb(234,36,40)" fg:x="35888" fg:w="6"/><text x="81.9994%" y="367.50"></text></g><g><title>`0x7FFCAE13BF96 (93 samples, 0.21%)</title><rect x="81.7631%" y="357" width="0.2118%" height="15" fill="rgb(213,64,8)" fg:x="35894" fg:w="93"/><text x="82.0131%" y="367.50"></text></g><g><title>`0x7FFCAE13BF9D (10 samples, 0.02%)</title><rect x="81.9841%" y="357" width="0.0228%" height="15" fill="rgb(210,75,36)" fg:x="35991" fg:w="10"/><text x="82.2341%" y="367.50"></text></g><g><title>`0x7FFCAE13BFA1 (17 samples, 0.04%)</title><rect x="82.0068%" y="357" width="0.0387%" height="15" fill="rgb(229,88,21)" fg:x="36001" fg:w="17"/><text x="82.2568%" y="367.50"></text></g><g><title>`0x7FFCAE13BFA8 (6 samples, 0.01%)</title><rect x="82.0547%" y="357" width="0.0137%" height="15" fill="rgb(252,204,47)" fg:x="36022" fg:w="6"/><text x="82.3047%" y="367.50"></text></g><g><title>`0x7FFCAE13BFAB (5 samples, 0.01%)</title><rect x="82.0683%" y="357" width="0.0114%" height="15" fill="rgb(208,77,27)" fg:x="36028" fg:w="5"/><text x="82.3183%" y="367.50"></text></g><g><title>`0x7FFCAE13BFB0 (102 samples, 0.23%)</title><rect x="82.0843%" y="357" width="0.2323%" height="15" fill="rgb(221,76,26)" fg:x="36035" fg:w="102"/><text x="82.3343%" y="367.50"></text></g><g><title>`0x7FFCAE13BFB6 (5 samples, 0.01%)</title><rect x="82.3257%" y="357" width="0.0114%" height="15" fill="rgb(225,139,18)" fg:x="36141" fg:w="5"/><text x="82.5757%" y="367.50"></text></g><g><title>`0x7FFCAE13BFBC (9 samples, 0.02%)</title><rect x="82.3440%" y="357" width="0.0205%" height="15" fill="rgb(230,137,11)" fg:x="36149" fg:w="9"/><text x="82.5940%" y="367.50"></text></g><g><title>`0x7FFCAE13BFBF (6 samples, 0.01%)</title><rect x="82.3645%" y="357" width="0.0137%" height="15" fill="rgb(212,28,1)" fg:x="36158" fg:w="6"/><text x="82.6145%" y="367.50"></text></g><g><title>`0x7FFCAE13BFCD (6 samples, 0.01%)</title><rect x="82.3850%" y="357" width="0.0137%" height="15" fill="rgb(248,164,17)" fg:x="36167" fg:w="6"/><text x="82.6350%" y="367.50"></text></g><g><title>`0x7FFCAE0CABB0 (101 samples, 0.23%)</title><rect x="82.4055%" y="341" width="0.2301%" height="15" fill="rgb(222,171,42)" fg:x="36176" fg:w="101"/><text x="82.6555%" y="351.50"></text></g><g><title>`0x7FFCAE0CABC0 (6 samples, 0.01%)</title><rect x="82.6401%" y="341" width="0.0137%" height="15" fill="rgb(243,84,45)" fg:x="36279" fg:w="6"/><text x="82.8901%" y="351.50"></text></g><g><title>`0x7FFCAE13BFD2 (119 samples, 0.27%)</title><rect x="82.3986%" y="357" width="0.2711%" height="15" fill="rgb(252,49,23)" fg:x="36173" fg:w="119"/><text x="82.6486%" y="367.50"></text></g><g><title>`0x7FFCAE13BFD4 (6 samples, 0.01%)</title><rect x="82.6697%" y="357" width="0.0137%" height="15" fill="rgb(215,19,7)" fg:x="36292" fg:w="6"/><text x="82.9197%" y="367.50"></text></g><g><title>`0x7FFCAE13BFEF (5 samples, 0.01%)</title><rect x="82.6834%" y="357" width="0.0114%" height="15" fill="rgb(238,81,41)" fg:x="36298" fg:w="5"/><text x="82.9334%" y="367.50"></text></g><g><title>`0x7FFCAE13BFF4 (7 samples, 0.02%)</title><rect x="82.6948%" y="357" width="0.0159%" height="15" fill="rgb(210,199,37)" fg:x="36303" fg:w="7"/><text x="82.9448%" y="367.50"></text></g><g><title>`0x7FFCAE13BFF7 (6 samples, 0.01%)</title><rect x="82.7107%" y="357" width="0.0137%" height="15" fill="rgb(244,192,49)" fg:x="36310" fg:w="6"/><text x="82.9607%" y="367.50"></text></g><g><title>`0x7FFCAE13C026 (6 samples, 0.01%)</title><rect x="82.7244%" y="357" width="0.0137%" height="15" fill="rgb(226,211,11)" fg:x="36316" fg:w="6"/><text x="82.9744%" y="367.50"></text></g><g><title>`0x7FFCAE13C02F (82 samples, 0.19%)</title><rect x="82.7380%" y="357" width="0.1868%" height="15" fill="rgb(236,162,54)" fg:x="36322" fg:w="82"/><text x="82.9880%" y="367.50"></text></g><g><title>`0x7FFCAE13C037 (5 samples, 0.01%)</title><rect x="82.9339%" y="357" width="0.0114%" height="15" fill="rgb(220,229,9)" fg:x="36408" fg:w="5"/><text x="83.1839%" y="367.50"></text></g><g><title>`0x7FFCAE13C03E (7 samples, 0.02%)</title><rect x="82.9544%" y="357" width="0.0159%" height="15" fill="rgb(250,87,22)" fg:x="36417" fg:w="7"/><text x="83.2044%" y="367.50"></text></g><g><title>`0x7FFCAE13C045 (7 samples, 0.02%)</title><rect x="82.9704%" y="357" width="0.0159%" height="15" fill="rgb(239,43,17)" fg:x="36424" fg:w="7"/><text x="83.2204%" y="367.50"></text></g><g><title>`0x7FFCAE13C04F (83 samples, 0.19%)</title><rect x="82.9909%" y="357" width="0.1891%" height="15" fill="rgb(231,177,25)" fg:x="36433" fg:w="83"/><text x="83.2409%" y="367.50"></text></g><g><title>`0x7FFCAE13C054 (12 samples, 0.03%)</title><rect x="83.1800%" y="357" width="0.0273%" height="15" fill="rgb(219,179,1)" fg:x="36516" fg:w="12"/><text x="83.4300%" y="367.50"></text></g><g><title>`0x7FFCAE13C056 (6 samples, 0.01%)</title><rect x="83.2073%" y="357" width="0.0137%" height="15" fill="rgb(238,219,53)" fg:x="36528" fg:w="6"/><text x="83.4573%" y="367.50"></text></g><g><title>`0x7FFCAE13C059 (6 samples, 0.01%)</title><rect x="83.2210%" y="357" width="0.0137%" height="15" fill="rgb(232,167,36)" fg:x="36534" fg:w="6"/><text x="83.4710%" y="367.50"></text></g><g><title>`0x7FFCAE13C05E (5 samples, 0.01%)</title><rect x="83.2346%" y="357" width="0.0114%" height="15" fill="rgb(244,19,51)" fg:x="36540" fg:w="5"/><text x="83.4846%" y="367.50"></text></g><g><title>`0x7FFCAE13C06A (100 samples, 0.23%)</title><rect x="83.2620%" y="357" width="0.2278%" height="15" fill="rgb(224,6,22)" fg:x="36552" fg:w="100"/><text x="83.5120%" y="367.50"></text></g><g><title>`0x7FFCAE13C06F (1,913 samples, 4.36%)</title><rect x="83.4897%" y="357" width="4.3576%" height="15" fill="rgb(224,145,5)" fg:x="36652" fg:w="1913"/><text x="83.7397%" y="367.50">`0x7F..</text></g><g><title>`0x7FFCAE13C07C (92 samples, 0.21%)</title><rect x="87.8474%" y="357" width="0.2096%" height="15" fill="rgb(234,130,49)" fg:x="38565" fg:w="92"/><text x="88.0974%" y="367.50"></text></g><g><title>`0x7FFCAE13C08B (5 samples, 0.01%)</title><rect x="88.0729%" y="357" width="0.0114%" height="15" fill="rgb(254,6,2)" fg:x="38664" fg:w="5"/><text x="88.3229%" y="367.50"></text></g><g><title>`0x7FFCAE13C0A7 (8 samples, 0.02%)</title><rect x="88.0957%" y="357" width="0.0182%" height="15" fill="rgb(208,96,46)" fg:x="38674" fg:w="8"/><text x="88.3457%" y="367.50"></text></g><g><title>`0x7FFCAE13C0AB (8 samples, 0.02%)</title><rect x="88.1139%" y="357" width="0.0182%" height="15" fill="rgb(239,3,39)" fg:x="38682" fg:w="8"/><text x="88.3639%" y="367.50"></text></g><g><title>`0x7FFCAE13C0AF (222 samples, 0.51%)</title><rect x="88.1321%" y="357" width="0.5057%" height="15" fill="rgb(233,210,1)" fg:x="38690" fg:w="222"/><text x="88.3821%" y="367.50"></text></g><g><title>`0x7FFCAE13C0ED (100 samples, 0.23%)</title><rect x="88.6401%" y="357" width="0.2278%" height="15" fill="rgb(244,137,37)" fg:x="38913" fg:w="100"/><text x="88.8901%" y="367.50"></text></g><g><title>`0x7FFCAE13C0F0 (6 samples, 0.01%)</title><rect x="88.8679%" y="357" width="0.0137%" height="15" fill="rgb(240,136,2)" fg:x="39013" fg:w="6"/><text x="89.1179%" y="367.50"></text></g><g><title>`0x7FFCAE13C0F4 (6 samples, 0.01%)</title><rect x="88.8815%" y="357" width="0.0137%" height="15" fill="rgb(239,18,37)" fg:x="39019" fg:w="6"/><text x="89.1315%" y="367.50"></text></g><g><title>`0x7FFCAE13C107 (100 samples, 0.23%)</title><rect x="88.9294%" y="357" width="0.2278%" height="15" fill="rgb(218,185,22)" fg:x="39040" fg:w="100"/><text x="89.1794%" y="367.50"></text></g><g><title>`0x7FFCAE13C10A (6 samples, 0.01%)</title><rect x="89.1572%" y="357" width="0.0137%" height="15" fill="rgb(225,218,4)" fg:x="39140" fg:w="6"/><text x="89.4072%" y="367.50"></text></g><g><title>`0x7FFCAE13C10E (5 samples, 0.01%)</title><rect x="89.1708%" y="357" width="0.0114%" height="15" fill="rgb(230,182,32)" fg:x="39146" fg:w="5"/><text x="89.4208%" y="367.50"></text></g><g><title>`0x7FFCAE13C363 (6 samples, 0.01%)</title><rect x="89.2005%" y="357" width="0.0137%" height="15" fill="rgb(242,56,43)" fg:x="39159" fg:w="6"/><text x="89.4505%" y="367.50"></text></g><g><title>`0x7FFCAE13C458 (8 samples, 0.02%)</title><rect x="89.2141%" y="357" width="0.0182%" height="15" fill="rgb(233,99,24)" fg:x="39165" fg:w="8"/><text x="89.4641%" y="367.50"></text></g><g><title>`0x7FFCAE0CAB11 (4,707 samples, 10.72%)</title><rect x="78.5194%" y="373" width="10.7221%" height="15" fill="rgb(234,209,42)" fg:x="34470" fg:w="4707"/><text x="78.7694%" y="383.50">`0x7FFCAE0CAB11</text></g><g><title>`0x7FFCAE0CAB1C (6 samples, 0.01%)</title><rect x="89.2460%" y="373" width="0.0137%" height="15" fill="rgb(227,7,12)" fg:x="39179" fg:w="6"/><text x="89.4960%" y="383.50"></text></g><g><title>`0x7FFCAE0CAB21 (88 samples, 0.20%)</title><rect x="89.2597%" y="373" width="0.2005%" height="15" fill="rgb(245,203,43)" fg:x="39185" fg:w="88"/><text x="89.5097%" y="383.50"></text></g><g><title>block.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (5,262 samples, 11.99%)</title><rect x="77.4989%" y="437" width="11.9863%" height="15" fill="rgb(238,205,33)" fg:x="34022" fg:w="5262"/><text x="77.7489%" y="447.50">block.exe`alloc::a..</text></g><g><title>block.exe`alloc::alloc::dealloc (5,262 samples, 11.99%)</title><rect x="77.4989%" y="421" width="11.9863%" height="15" fill="rgb(231,56,7)" fg:x="34022" fg:w="5262"/><text x="77.7489%" y="431.50">block.exe`alloc::a..</text></g><g><title>block.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (5,262 samples, 11.99%)</title><rect x="77.4989%" y="405" width="11.9863%" height="15" fill="rgb(244,186,29)" fg:x="34022" fg:w="5262"/><text x="77.7489%" y="415.50">block.exe`std::all..</text></g><g><title>block.exe`std::sys::windows::alloc::impl$0::dealloc (5,262 samples, 11.99%)</title><rect x="77.4989%" y="389" width="11.9863%" height="15" fill="rgb(234,111,31)" fg:x="34022" fg:w="5262"/><text x="77.7489%" y="399.50">block.exe`std::sys..</text></g><g><title>block.exe`blake3::platform::Platform::compress_in_place (276 samples, 0.63%)</title><rect x="91.1139%" y="389" width="0.6287%" height="15" fill="rgb(241,149,10)" fg:x="39999" fg:w="276"/><text x="91.3639%" y="399.50"></text></g><g><title>block.exe`blake3::sse41::compress_in_place (159 samples, 0.36%)</title><rect x="91.3804%" y="373" width="0.3622%" height="15" fill="rgb(249,206,44)" fg:x="40116" fg:w="159"/><text x="91.6304%" y="383.50"></text></g><g><title>block.exe`_blake3_compress_in_place_sse41() (123 samples, 0.28%)</title><rect x="91.4624%" y="357" width="0.2802%" height="15" fill="rgb(251,153,30)" fg:x="40152" fg:w="123"/><text x="91.7124%" y="367.50"></text></g><g><title>block.exe`blake3::Output::root_hash (540 samples, 1.23%)</title><rect x="90.6310%" y="405" width="1.2301%" height="15" fill="rgb(239,152,38)" fg:x="39787" fg:w="540"/><text x="90.8810%" y="415.50"></text></g><g><title>block.exe`blake3::platform::le_bytes_from_words_32 (52 samples, 0.12%)</title><rect x="91.7426%" y="389" width="0.1185%" height="15" fill="rgb(249,139,47)" fg:x="40275" fg:w="52"/><text x="91.9926%" y="399.50"></text></g><g><title>block.exe`blake3::ChunkState::new (135 samples, 0.31%)</title><rect x="92.2574%" y="389" width="0.3075%" height="15" fill="rgb(244,64,35)" fg:x="40501" fg:w="135"/><text x="92.5074%" y="399.50"></text></g><g><title>`0x7FFC7CFB1310 (6 samples, 0.01%)</title><rect x="96.3144%" y="325" width="0.0137%" height="15" fill="rgb(216,46,15)" fg:x="42282" fg:w="6"/><text x="96.5644%" y="335.50"></text></g><g><title>`0x7FFC7CFB131A (8 samples, 0.02%)</title><rect x="96.3326%" y="325" width="0.0182%" height="15" fill="rgb(250,74,19)" fg:x="42290" fg:w="8"/><text x="96.5826%" y="335.50"></text></g><g><title>`0x7FFC7CFB1430 (8 samples, 0.02%)</title><rect x="96.3599%" y="325" width="0.0182%" height="15" fill="rgb(249,42,33)" fg:x="42302" fg:w="8"/><text x="96.6099%" y="335.50"></text></g><g><title>`0x7FFC7CFB1434 (5 samples, 0.01%)</title><rect x="96.3781%" y="325" width="0.0114%" height="15" fill="rgb(242,149,17)" fg:x="42310" fg:w="5"/><text x="96.6281%" y="335.50"></text></g><g><title>`0x7FFC7CFB144D (7 samples, 0.02%)</title><rect x="96.3895%" y="325" width="0.0159%" height="15" fill="rgb(244,29,21)" fg:x="42315" fg:w="7"/><text x="96.6395%" y="335.50"></text></g><g><title>`0x7FFC7CFB1460 (8 samples, 0.02%)</title><rect x="96.4055%" y="325" width="0.0182%" height="15" fill="rgb(220,130,37)" fg:x="42322" fg:w="8"/><text x="96.6555%" y="335.50"></text></g><g><title>`0x7FFC7CFB1467 (101 samples, 0.23%)</title><rect x="96.4237%" y="325" width="0.2301%" height="15" fill="rgb(211,67,2)" fg:x="42330" fg:w="101"/><text x="96.6737%" y="335.50"></text></g><g><title>`0x7FFC7CFB146D (10 samples, 0.02%)</title><rect x="96.6538%" y="325" width="0.0228%" height="15" fill="rgb(235,68,52)" fg:x="42431" fg:w="10"/><text x="96.9038%" y="335.50"></text></g><g><title>`0x7FFC7CFB148C (8 samples, 0.02%)</title><rect x="96.6856%" y="325" width="0.0182%" height="15" fill="rgb(246,142,3)" fg:x="42445" fg:w="8"/><text x="96.9356%" y="335.50"></text></g><g><title>`0x7FFC7CFB1490 (33 samples, 0.08%)</title><rect x="96.7039%" y="325" width="0.0752%" height="15" fill="rgb(241,25,7)" fg:x="42453" fg:w="33"/><text x="96.9539%" y="335.50"></text></g><g><title>`0x7FFC7CFB1497 (159 samples, 0.36%)</title><rect x="96.7790%" y="325" width="0.3622%" height="15" fill="rgb(242,119,39)" fg:x="42486" fg:w="159"/><text x="97.0290%" y="335.50"></text></g><g><title>`0x7FFC7CFB1568 (6 samples, 0.01%)</title><rect x="97.1503%" y="325" width="0.0137%" height="15" fill="rgb(241,98,45)" fg:x="42649" fg:w="6"/><text x="97.4003%" y="335.50"></text></g><g><title>`0x7FFC7CFB1570 (21 samples, 0.05%)</title><rect x="97.1686%" y="325" width="0.0478%" height="15" fill="rgb(254,28,30)" fg:x="42657" fg:w="21"/><text x="97.4186%" y="335.50"></text></g><g><title>`0x7FFC7CFB1577 (5 samples, 0.01%)</title><rect x="97.2232%" y="325" width="0.0114%" height="15" fill="rgb(241,142,54)" fg:x="42681" fg:w="5"/><text x="97.4732%" y="335.50"></text></g><g><title>`0x7FFC7CFB1582 (12 samples, 0.03%)</title><rect x="97.2437%" y="325" width="0.0273%" height="15" fill="rgb(222,85,15)" fg:x="42690" fg:w="12"/><text x="97.4937%" y="335.50"></text></g><g><title>`0x7FFC7CFB15F1 (72 samples, 0.16%)</title><rect x="97.2711%" y="325" width="0.1640%" height="15" fill="rgb(210,85,47)" fg:x="42702" fg:w="72"/><text x="97.5211%" y="335.50"></text></g><g><title>`0x7FFC7CFB15F8 (19 samples, 0.04%)</title><rect x="97.4351%" y="325" width="0.0433%" height="15" fill="rgb(224,206,25)" fg:x="42774" fg:w="19"/><text x="97.6851%" y="335.50"></text></g><g><title>`0x7FFC7CFB15FF (27 samples, 0.06%)</title><rect x="97.4784%" y="325" width="0.0615%" height="15" fill="rgb(243,201,19)" fg:x="42793" fg:w="27"/><text x="97.7284%" y="335.50"></text></g><g><title>`0x7FFC7CFB1606 (159 samples, 0.36%)</title><rect x="97.5399%" y="325" width="0.3622%" height="15" fill="rgb(236,59,4)" fg:x="42820" fg:w="159"/><text x="97.7899%" y="335.50"></text></g><g><title>`0x7FFC7CFB160A (15 samples, 0.03%)</title><rect x="97.9021%" y="325" width="0.0342%" height="15" fill="rgb(254,179,45)" fg:x="42979" fg:w="15"/><text x="98.1521%" y="335.50"></text></g><g><title>block.exe`core::array::impl$16::index_mut(unsigned char[64]*, core::ops::range::RangeFrom (5 samples, 0.01%)</title><rect x="97.9453%" y="325" width="0.0114%" height="15" fill="rgb(226,14,10)" fg:x="42998" fg:w="5"/><text x="98.1953%" y="335.50"></text></g><g><title>block.exe`core::slice::index::impl$1::index_mut(ref_mut$&lt;slice2$&lt;u8&gt; &gt;, core::ops::range::RangeFrom (5 samples, 0.01%)</title><rect x="97.9453%" y="309" width="0.0114%" height="15" fill="rgb(244,27,41)" fg:x="42998" fg:w="5"/><text x="98.1953%" y="319.50"></text></g><g><title>block.exe`core::slice::index::impl$6::index_mut(core::ops::range::RangeFrom&lt;usize&gt;, ref_mut$&lt;slice2$ (5 samples, 0.01%)</title><rect x="97.9453%" y="293" width="0.0114%" height="15" fill="rgb(235,35,32)" fg:x="42998" fg:w="5"/><text x="98.1953%" y="303.50"></text></g><g><title>block.exe`core::slice::index::impl$6::get_unchecked_mut(core::ops::range::RangeFrom&lt;usize&gt;, ptr_mut$&lt;slice2$ (5 samples, 0.01%)</title><rect x="97.9453%" y="277" width="0.0114%" height="15" fill="rgb(218,68,31)" fg:x="42998" fg:w="5"/><text x="98.1953%" y="287.50"></text></g><g><title>block.exe`core::slice::index::impl$4::get_unchecked_mut(core::ops::range::Range&lt;usize&gt;, ptr_mut$&lt;slice2$ (5 samples, 0.01%)</title><rect x="97.9453%" y="261" width="0.0114%" height="15" fill="rgb(207,120,37)" fg:x="42998" fg:w="5"/><text x="98.1953%" y="271.50"></text></g><g><title>block.exe`core::ptr::mut_ptr::impl$0::add (5 samples, 0.01%)</title><rect x="97.9453%" y="245" width="0.0114%" height="15" fill="rgb(227,98,0)" fg:x="42998" fg:w="5"/><text x="98.1953%" y="255.50"></text></g><g><title>block.exe`core::slice::impl$0::copy_from_slice(ref_mut$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (10 samples, 0.02%)</title><rect x="97.9567%" y="325" width="0.0228%" height="15" fill="rgb(207,7,3)" fg:x="43003" fg:w="10"/><text x="98.2067%" y="335.50"></text></g><g><title>block.exe`core::intrinsics::copy_nonoverlapping (10 samples, 0.02%)</title><rect x="97.9567%" y="309" width="0.0228%" height="15" fill="rgb(206,98,19)" fg:x="43003" fg:w="10"/><text x="98.2067%" y="319.50"></text></g><g><title>block.exe`blake3::ChunkState::output (2,460 samples, 5.60%)</title><rect x="92.5649%" y="389" width="5.6036%" height="15" fill="rgb(217,5,26)" fg:x="40636" fg:w="2460"/><text x="92.8149%" y="399.50">block.e..</text></g><g><title>block.exe`blake3::ChunkState::start_flag (1,587 samples, 3.62%)</title><rect x="94.5535%" y="373" width="3.6150%" height="15" fill="rgb(235,190,38)" fg:x="41509" fg:w="1587"/><text x="94.8035%" y="383.50">bloc..</text></g><g><title>block.exe`blake3::ChunkState::update(ref$&lt;slice2$ (1,558 samples, 3.55%)</title><rect x="94.6196%" y="357" width="3.5490%" height="15" fill="rgb(247,86,24)" fg:x="41538" fg:w="1558"/><text x="94.8696%" y="367.50">bloc..</text></g><g><title>block.exe`blake3::ChunkState::fill_buf(ref$&lt;slice2$ (915 samples, 2.08%)</title><rect x="96.0843%" y="341" width="2.0843%" height="15" fill="rgb(205,101,16)" fg:x="42181" fg:w="915"/><text x="96.3343%" y="351.50">b..</text></g><g><title>block.exe`memcpy (83 samples, 0.19%)</title><rect x="97.9795%" y="325" width="0.1891%" height="15" fill="rgb(246,168,33)" fg:x="43013" fg:w="83"/><text x="98.2295%" y="335.50"></text></g><g><title>block.exe`blake3::platform::avx2_detected (16 samples, 0.04%)</title><rect x="98.2027%" y="373" width="0.0364%" height="15" fill="rgb(231,114,1)" fg:x="43111" fg:w="16"/><text x="98.4527%" y="383.50"></text></g><g><title>block.exe`std_detect::detect::arch::x86::__is_feature_detected::avx2 (16 samples, 0.04%)</title><rect x="98.2027%" y="357" width="0.0364%" height="15" fill="rgb(207,184,53)" fg:x="43111" fg:w="16"/><text x="98.4527%" y="367.50"></text></g><g><title>block.exe`std_detect::detect::check_for (16 samples, 0.04%)</title><rect x="98.2027%" y="341" width="0.0364%" height="15" fill="rgb(224,95,51)" fg:x="43111" fg:w="16"/><text x="98.4527%" y="351.50"></text></g><g><title>block.exe`std_detect::detect::cache::test (16 samples, 0.04%)</title><rect x="98.2027%" y="325" width="0.0364%" height="15" fill="rgb(212,188,45)" fg:x="43111" fg:w="16"/><text x="98.4527%" y="335.50"></text></g><g><title>block.exe`std_detect::detect::cache::Cache::test (16 samples, 0.04%)</title><rect x="98.2027%" y="309" width="0.0364%" height="15" fill="rgb(223,154,38)" fg:x="43111" fg:w="16"/><text x="98.4527%" y="319.50"></text></g><g><title>block.exe`core::sync::atomic::AtomicUsize::load (10 samples, 0.02%)</title><rect x="98.2164%" y="293" width="0.0228%" height="15" fill="rgb(251,22,52)" fg:x="43117" fg:w="10"/><text x="98.4664%" y="303.50"></text></g><g><title>block.exe`core::sync::atomic::atomic_load (10 samples, 0.02%)</title><rect x="98.2164%" y="277" width="0.0228%" height="15" fill="rgb(229,209,22)" fg:x="43117" fg:w="10"/><text x="98.4664%" y="287.50"></text></g><g><title>block.exe`block::block::Block&lt;block::Data&gt;::hash (20,479 samples, 46.65%)</title><rect x="51.6697%" y="501" width="46.6492%" height="15" fill="rgb(234,138,34)" fg:x="22683" fg:w="20479"/><text x="51.9197%" y="511.50">block.exe`block::block::Block&lt;block::Data&gt;::hash</text></g><g><title>block.exe`core::ptr::drop_in_place(alloc::vec::Vec (9,140 samples, 20.82%)</title><rect x="77.4989%" y="485" width="20.8200%" height="15" fill="rgb(212,95,11)" fg:x="34022" fg:w="9140"/><text x="77.7489%" y="495.50">block.exe`core::ptr::drop_in_plac..</text></g><g><title>block.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (9,140 samples, 20.82%)</title><rect x="77.4989%" y="469" width="20.8200%" height="15" fill="rgb(240,179,47)" fg:x="34022" fg:w="9140"/><text x="77.7489%" y="479.50">block.exe`core::ptr::drop_in_plac..</text></g><g><title>block.exe`alloc::raw_vec::impl$3::drop(alloc::raw_vec::RawVec (9,140 samples, 20.82%)</title><rect x="77.4989%" y="453" width="20.8200%" height="15" fill="rgb(240,163,11)" fg:x="34022" fg:w="9140"/><text x="77.7489%" y="463.50">block.exe`alloc::raw_vec::impl$3:..</text></g><g><title>block.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::current_memory (3,878 samples, 8.83%)</title><rect x="89.4852%" y="437" width="8.8337%" height="15" fill="rgb(236,37,12)" fg:x="39284" fg:w="3878"/><text x="89.7352%" y="447.50">block.exe`al..</text></g><g><title>block.exe`blake3::hash(ref$&lt;slice2$ (3,761 samples, 8.57%)</title><rect x="89.7517%" y="421" width="8.5672%" height="15" fill="rgb(232,164,16)" fg:x="39401" fg:w="3761"/><text x="90.0017%" y="431.50">block.exe`bl..</text></g><g><title>block.exe`blake3::hash_all_at_once(ref$&lt;slice2$ (2,835 samples, 6.46%)</title><rect x="91.8610%" y="405" width="6.4579%" height="15" fill="rgb(244,205,15)" fg:x="40327" fg:w="2835"/><text x="92.1110%" y="415.50">block.ex..</text></g><g><title>block.exe`blake3::platform::Platform::detect (66 samples, 0.15%)</title><rect x="98.1686%" y="389" width="0.1503%" height="15" fill="rgb(223,117,47)" fg:x="43096" fg:w="66"/><text x="98.4186%" y="399.50"></text></g><g><title>block.exe`blake3::platform::avx512_detected (35 samples, 0.08%)</title><rect x="98.2392%" y="373" width="0.0797%" height="15" fill="rgb(244,107,35)" fg:x="43127" fg:w="35"/><text x="98.4892%" y="383.50"></text></g><g><title>block.exe`std_detect::detect::arch::x86::__is_feature_detected::avx512f (26 samples, 0.06%)</title><rect x="98.2597%" y="357" width="0.0592%" height="15" fill="rgb(205,140,8)" fg:x="43136" fg:w="26"/><text x="98.5097%" y="367.50"></text></g><g><title>block.exe`std_detect::detect::check_for (26 samples, 0.06%)</title><rect x="98.2597%" y="341" width="0.0592%" height="15" fill="rgb(228,84,46)" fg:x="43136" fg:w="26"/><text x="98.5097%" y="351.50"></text></g><g><title>block.exe`std_detect::detect::cache::test (26 samples, 0.06%)</title><rect x="98.2597%" y="325" width="0.0592%" height="15" fill="rgb(254,188,9)" fg:x="43136" fg:w="26"/><text x="98.5097%" y="335.50"></text></g><g><title>block.exe`std_detect::detect::cache::Cache::test (26 samples, 0.06%)</title><rect x="98.2597%" y="309" width="0.0592%" height="15" fill="rgb(206,112,54)" fg:x="43136" fg:w="26"/><text x="98.5097%" y="319.50"></text></g><g><title>block.exe`core::sync::atomic::AtomicUsize::load (12 samples, 0.03%)</title><rect x="98.2916%" y="293" width="0.0273%" height="15" fill="rgb(216,84,49)" fg:x="43150" fg:w="12"/><text x="98.5416%" y="303.50"></text></g><g><title>block.exe`core::sync::atomic::atomic_load (12 samples, 0.03%)</title><rect x="98.2916%" y="277" width="0.0273%" height="15" fill="rgb(214,194,35)" fg:x="43150" fg:w="12"/><text x="98.5416%" y="287.50"></text></g><g><title>block.exe`core::cmp::impls::impl$57::cmp (132 samples, 0.30%)</title><rect x="98.3189%" y="501" width="0.3007%" height="15" fill="rgb(249,28,3)" fg:x="43162" fg:w="132"/><text x="98.5689%" y="511.50"></text></g><g><title>block.exe`core::cmp::impls::impl$54::lt (5 samples, 0.01%)</title><rect x="98.6219%" y="469" width="0.0114%" height="15" fill="rgb(222,56,52)" fg:x="43295" fg:w="5"/><text x="98.8719%" y="479.50"></text></g><g><title>block.exe`block::block::Block&lt;block::Data&gt;::is_valid (20,734 samples, 47.23%)</title><rect x="51.4214%" y="517" width="47.2301%" height="15" fill="rgb(245,217,50)" fg:x="22574" fg:w="20734"/><text x="51.6714%" y="527.50">block.exe`block::block::Block&lt;block::Data&gt;::is_valid</text></g><g><title>block.exe`core::iter::range::impl$6::next(core::ops::range::Range (14 samples, 0.03%)</title><rect x="98.6196%" y="501" width="0.0319%" height="15" fill="rgb(213,201,24)" fg:x="43294" fg:w="14"/><text x="98.8696%" y="511.50"></text></g><g><title>block.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (14 samples, 0.03%)</title><rect x="98.6196%" y="485" width="0.0319%" height="15" fill="rgb(248,116,28)" fg:x="43294" fg:w="14"/><text x="98.8696%" y="495.50"></text></g><g><title>block.exe`core::iter::range::impl$43::forward_unchecked (8 samples, 0.02%)</title><rect x="98.6333%" y="469" width="0.0182%" height="15" fill="rgb(219,72,43)" fg:x="43300" fg:w="8"/><text x="98.8833%" y="479.50"></text></g><g><title>block.exe`core::num::impl$11::unchecked_add (8 samples, 0.02%)</title><rect x="98.6333%" y="453" width="0.0182%" height="15" fill="rgb(209,138,14)" fg:x="43300" fg:w="8"/><text x="98.8833%" y="463.50"></text></g><g><title>block.exe`block::block::Block&lt;block::Data&gt;::hash (5 samples, 0.01%)</title><rect x="98.6515%" y="501" width="0.0114%" height="15" fill="rgb(222,18,33)" fg:x="43308" fg:w="5"/><text x="98.9015%" y="511.50"></text></g><g><title>block.exe`block::blockchain::BlockChain&lt;block::Data&gt;::new_block&lt;block::Data&gt; (6 samples, 0.01%)</title><rect x="98.6515%" y="517" width="0.0137%" height="15" fill="rgb(213,199,7)" fg:x="43308" fg:w="6"/><text x="98.9015%" y="527.50"></text></g><g><title>block.exe`alloc::string::impl$67::write_str (7 samples, 0.02%)</title><rect x="98.6697%" y="421" width="0.0159%" height="15" fill="rgb(250,110,10)" fg:x="43316" fg:w="7"/><text x="98.9197%" y="431.50"></text></g><g><title>block.exe`alloc::string::String::push_str (7 samples, 0.02%)</title><rect x="98.6697%" y="405" width="0.0159%" height="15" fill="rgb(248,123,6)" fg:x="43316" fg:w="7"/><text x="98.9197%" y="415.50"></text></g><g><title>block.exe`alloc::vec::Vec::extend_from_slice (7 samples, 0.02%)</title><rect x="98.6697%" y="389" width="0.0159%" height="15" fill="rgb(206,91,31)" fg:x="43316" fg:w="7"/><text x="98.9197%" y="399.50"></text></g><g><title>block.exe`alloc::vec::spec_extend::impl$4::spec_extend (7 samples, 0.02%)</title><rect x="98.6697%" y="373" width="0.0159%" height="15" fill="rgb(211,154,13)" fg:x="43316" fg:w="7"/><text x="98.9197%" y="383.50"></text></g><g><title>block.exe`alloc::vec::Vec::append_elements (7 samples, 0.02%)</title><rect x="98.6697%" y="357" width="0.0159%" height="15" fill="rgb(225,148,7)" fg:x="43316" fg:w="7"/><text x="98.9197%" y="367.50"></text></g><g><title>block.exe`alloc::vec::Vec::len (5 samples, 0.01%)</title><rect x="98.6743%" y="341" width="0.0114%" height="15" fill="rgb(220,160,43)" fg:x="43318" fg:w="5"/><text x="98.9243%" y="351.50"></text></g><g><title>block.exe`alloc::raw_vec::impl$1::reserve::do_reserve_and_handle&lt;u8,alloc::alloc::Global&gt; (5 samples, 0.01%)</title><rect x="98.6743%" y="325" width="0.0114%" height="15" fill="rgb(213,52,39)" fg:x="43318" fg:w="5"/><text x="98.9243%" y="335.50"></text></g><g><title>block.exe`alloc::raw_vec::RawVec::grow_amortized (5 samples, 0.01%)</title><rect x="98.6743%" y="309" width="0.0114%" height="15" fill="rgb(243,137,7)" fg:x="43318" fg:w="5"/><text x="98.9243%" y="319.50"></text></g><g><title>block.exe`core::result::impl$26::branch (5 samples, 0.01%)</title><rect x="98.6743%" y="293" width="0.0114%" height="15" fill="rgb(230,79,13)" fg:x="43318" fg:w="5"/><text x="98.9243%" y="303.50"></text></g><g><title>block.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt; (5 samples, 0.01%)</title><rect x="98.6743%" y="277" width="0.0114%" height="15" fill="rgb(247,105,23)" fg:x="43318" fg:w="5"/><text x="98.9243%" y="287.50"></text></g><g><title>block.exe`core::result::Result::map_err (5 samples, 0.01%)</title><rect x="98.6743%" y="261" width="0.0114%" height="15" fill="rgb(223,179,41)" fg:x="43318" fg:w="5"/><text x="98.9243%" y="271.50"></text></g><g><title>`0x7FFCAE0D1CAA (5 samples, 0.01%)</title><rect x="98.6743%" y="245" width="0.0114%" height="15" fill="rgb(218,9,34)" fg:x="43318" fg:w="5"/><text x="98.9243%" y="255.50"></text></g><g><title>`0x7FFCAE0D1DE7 (5 samples, 0.01%)</title><rect x="98.6743%" y="229" width="0.0114%" height="15" fill="rgb(222,106,8)" fg:x="43318" fg:w="5"/><text x="98.9243%" y="239.50"></text></g><g><title>block.exe`alloc::fmt::format::format_inner (11 samples, 0.03%)</title><rect x="98.6697%" y="469" width="0.0251%" height="15" fill="rgb(211,220,0)" fg:x="43316" fg:w="11"/><text x="98.9197%" y="479.50"></text></g><g><title>block.exe`core::result::Result::expect (11 samples, 0.03%)</title><rect x="98.6697%" y="453" width="0.0251%" height="15" fill="rgb(229,52,16)" fg:x="43316" fg:w="11"/><text x="98.9197%" y="463.50"></text></g><g><title>block.exe`core::fmt::write (11 samples, 0.03%)</title><rect x="98.6697%" y="437" width="0.0251%" height="15" fill="rgb(212,155,18)" fg:x="43316" fg:w="11"/><text x="98.9197%" y="447.50"></text></g><g><title>block.exe`alloc::string::impl$67::write_str(alloc::string::String*, ref$ (6 samples, 0.01%)</title><rect x="98.6948%" y="437" width="0.0137%" height="15" fill="rgb(242,21,14)" fg:x="43327" fg:w="6"/><text x="98.9448%" y="447.50"></text></g><g><title>block.exe`alloc::string::String::push_str(ref$ (6 samples, 0.01%)</title><rect x="98.6948%" y="421" width="0.0137%" height="15" fill="rgb(222,19,48)" fg:x="43327" fg:w="6"/><text x="98.9448%" y="431.50"></text></g><g><title>block.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::extend_from_slice(ref$&lt;slice2$ (6 samples, 0.01%)</title><rect x="98.6948%" y="405" width="0.0137%" height="15" fill="rgb(232,45,27)" fg:x="43327" fg:w="6"/><text x="98.9448%" y="415.50"></text></g><g><title>block.exe`alloc::vec::spec_extend::impl$4::spec_extend(alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, core::slice::iter::Iter (6 samples, 0.01%)</title><rect x="98.6948%" y="389" width="0.0137%" height="15" fill="rgb(249,103,42)" fg:x="43327" fg:w="6"/><text x="98.9448%" y="399.50"></text></g><g><title>block.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::append_elements(ptr_const$&lt;slice2$ (6 samples, 0.01%)</title><rect x="98.6948%" y="373" width="0.0137%" height="15" fill="rgb(246,81,33)" fg:x="43327" fg:w="6"/><text x="98.9448%" y="383.50"></text></g><g><title>block.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::len (6 samples, 0.01%)</title><rect x="98.6948%" y="357" width="0.0137%" height="15" fill="rgb(252,33,42)" fg:x="43327" fg:w="6"/><text x="98.9448%" y="367.50"></text></g><g><title>block.exe`alloc::raw_vec::impl$1::reserve::do_reserve_and_handle&lt;u8,alloc::alloc::Global&gt;(alloc::raw_vec::RawVec (6 samples, 0.01%)</title><rect x="98.6948%" y="341" width="0.0137%" height="15" fill="rgb(209,212,41)" fg:x="43327" fg:w="6"/><text x="98.9448%" y="351.50"></text></g><g><title>block.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::grow_amortized (6 samples, 0.01%)</title><rect x="98.6948%" y="325" width="0.0137%" height="15" fill="rgb(207,154,6)" fg:x="43327" fg:w="6"/><text x="98.9448%" y="335.50"></text></g><g><title>block.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (5 samples, 0.01%)</title><rect x="98.6970%" y="309" width="0.0114%" height="15" fill="rgb(223,64,47)" fg:x="43328" fg:w="5"/><text x="98.9470%" y="319.50"></text></g><g><title>block.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(enum2$&lt;core::result::Result&lt;core::alloc::layout::Layout,core::alloc::layout::LayoutError&gt; &gt;, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (5 samples, 0.01%)</title><rect x="98.6970%" y="293" width="0.0114%" height="15" fill="rgb(211,161,38)" fg:x="43328" fg:w="5"/><text x="98.9470%" y="303.50"></text></g><g><title>block.exe`enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;, alloc::raw_vec::finish_grow::closure_env$1 (5 samples, 0.01%)</title><rect x="98.6970%" y="277" width="0.0114%" height="15" fill="rgb(219,138,40)" fg:x="43328" fg:w="5"/><text x="98.9470%" y="287.50"></text></g><g><title>block.exe`alloc::string::impl$38::deref (8 samples, 0.02%)</title><rect x="98.7175%" y="405" width="0.0182%" height="15" fill="rgb(241,228,46)" fg:x="43337" fg:w="8"/><text x="98.9675%" y="415.50"></text></g><g><title>block.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (8 samples, 0.02%)</title><rect x="98.7175%" y="389" width="0.0182%" height="15" fill="rgb(223,209,38)" fg:x="43337" fg:w="8"/><text x="98.9675%" y="399.50"></text></g><g><title>block.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::as_ptr (8 samples, 0.02%)</title><rect x="98.7175%" y="373" width="0.0182%" height="15" fill="rgb(236,164,45)" fg:x="43337" fg:w="8"/><text x="98.9675%" y="383.50"></text></g><g><title>block.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::ptr (8 samples, 0.02%)</title><rect x="98.7175%" y="357" width="0.0182%" height="15" fill="rgb(231,15,5)" fg:x="43337" fg:w="8"/><text x="98.9675%" y="367.50"></text></g><g><title>block.exe`colored::ColoredString::compute_style (8 samples, 0.02%)</title><rect x="98.7175%" y="341" width="0.0182%" height="15" fill="rgb(252,35,15)" fg:x="43337" fg:w="8"/><text x="98.9675%" y="351.50"></text></g><g><title>block.exe`alloc::string::String::push_str(ref$ (7 samples, 0.02%)</title><rect x="98.7198%" y="325" width="0.0159%" height="15" fill="rgb(248,181,18)" fg:x="43338" fg:w="7"/><text x="98.9698%" y="335.50"></text></g><g><title>block.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::extend_from_slice(ref$&lt;slice2$ (7 samples, 0.02%)</title><rect x="98.7198%" y="309" width="0.0159%" height="15" fill="rgb(233,39,42)" fg:x="43338" fg:w="7"/><text x="98.9698%" y="319.50"></text></g><g><title>block.exe`alloc::vec::spec_extend::impl$4::spec_extend(alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, core::slice::iter::Iter (7 samples, 0.02%)</title><rect x="98.7198%" y="293" width="0.0159%" height="15" fill="rgb(238,110,33)" fg:x="43338" fg:w="7"/><text x="98.9698%" y="303.50"></text></g><g><title>block.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::append_elements(ptr_const$&lt;slice2$ (7 samples, 0.02%)</title><rect x="98.7198%" y="277" width="0.0159%" height="15" fill="rgb(233,195,10)" fg:x="43338" fg:w="7"/><text x="98.9698%" y="287.50"></text></g><g><title>block.exe`core::ptr::mut_ptr::impl$0::add (6 samples, 0.01%)</title><rect x="98.7221%" y="261" width="0.0137%" height="15" fill="rgb(254,105,3)" fg:x="43339" fg:w="6"/><text x="98.9721%" y="271.50"></text></g><g><title>block.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::ptr (6 samples, 0.01%)</title><rect x="98.7221%" y="245" width="0.0137%" height="15" fill="rgb(221,225,9)" fg:x="43339" fg:w="6"/><text x="98.9721%" y="255.50"></text></g><g><title>block.exe`alloc::raw_vec::impl$1::reserve::do_reserve_and_handle&lt;u8,alloc::alloc::Global&gt;(alloc::raw_vec::RawVec (6 samples, 0.01%)</title><rect x="98.7221%" y="229" width="0.0137%" height="15" fill="rgb(224,227,45)" fg:x="43339" fg:w="6"/><text x="98.9721%" y="239.50"></text></g><g><title>block.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::grow_amortized (6 samples, 0.01%)</title><rect x="98.7221%" y="213" width="0.0137%" height="15" fill="rgb(229,198,43)" fg:x="43339" fg:w="6"/><text x="98.9721%" y="223.50"></text></g><g><title>block.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (6 samples, 0.01%)</title><rect x="98.7221%" y="197" width="0.0137%" height="15" fill="rgb(206,209,35)" fg:x="43339" fg:w="6"/><text x="98.9721%" y="207.50"></text></g><g><title>block.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(enum2$&lt;core::result::Result&lt;core::alloc::layout::Layout,core::alloc::layout::LayoutError&gt; &gt;, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (6 samples, 0.01%)</title><rect x="98.7221%" y="181" width="0.0137%" height="15" fill="rgb(245,195,53)" fg:x="43339" fg:w="6"/><text x="98.9721%" y="191.50"></text></g><g><title>block.exe`enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;, alloc::raw_vec::finish_grow::closure_env$1 (5 samples, 0.01%)</title><rect x="98.7244%" y="165" width="0.0114%" height="15" fill="rgb(240,92,26)" fg:x="43340" fg:w="5"/><text x="98.9744%" y="175.50"></text></g><g><title>`0x7FFCAE0D1CAA (5 samples, 0.01%)</title><rect x="98.7244%" y="149" width="0.0114%" height="15" fill="rgb(207,40,23)" fg:x="43340" fg:w="5"/><text x="98.9744%" y="159.50"></text></g><g><title>block.exe`alloc::string::impl$41::to_string (21 samples, 0.05%)</title><rect x="98.6948%" y="469" width="0.0478%" height="15" fill="rgb(223,111,35)" fg:x="43327" fg:w="21"/><text x="98.9448%" y="479.50"></text></g><g><title>block.exe`enum2$&lt;core::result::Result&lt;tuple$&lt;&gt;,core::fmt::Error&gt; &gt;::expect(enum2$&lt;core::result::Result&lt;tuple$&lt;&gt;,core::fmt::Error&gt; &gt;, ref$ (21 samples, 0.05%)</title><rect x="98.6948%" y="453" width="0.0478%" height="15" fill="rgb(229,147,28)" fg:x="43327" fg:w="21"/><text x="98.9448%" y="463.50"></text></g><g><title>block.exe`colored::impl$7::fmt (15 samples, 0.03%)</title><rect x="98.7084%" y="437" width="0.0342%" height="15" fill="rgb(211,29,28)" fg:x="43333" fg:w="15"/><text x="98.9584%" y="447.50"></text></g><g><title>block.exe`colored::ColoredString::escape_inner_reset_sequences (11 samples, 0.03%)</title><rect x="98.7175%" y="421" width="0.0251%" height="15" fill="rgb(228,72,33)" fg:x="43337" fg:w="11"/><text x="98.9675%" y="431.50"></text></g><g><title>block.exe`alloc::fmt::format::format_inner (5 samples, 0.01%)</title><rect x="98.7563%" y="389" width="0.0114%" height="15" fill="rgb(205,214,31)" fg:x="43354" fg:w="5"/><text x="99.0063%" y="399.50"></text></g><g><title>block.exe`core::result::Result::expect (5 samples, 0.01%)</title><rect x="98.7563%" y="373" width="0.0114%" height="15" fill="rgb(224,111,15)" fg:x="43354" fg:w="5"/><text x="99.0063%" y="383.50"></text></g><g><title>block.exe`core::fmt::write (5 samples, 0.01%)</title><rect x="98.7563%" y="357" width="0.0114%" height="15" fill="rgb(253,21,26)" fg:x="43354" fg:w="5"/><text x="99.0063%" y="367.50"></text></g><g><title>`0x7FFCAB47DA19 (96 samples, 0.22%)</title><rect x="98.7882%" y="101" width="0.2187%" height="15" fill="rgb(245,139,43)" fg:x="43368" fg:w="96"/><text x="99.0382%" y="111.50"></text></g><g><title>`0x7FFCAE12F454 (93 samples, 0.21%)</title><rect x="98.7950%" y="85" width="0.2118%" height="15" fill="rgb(252,170,7)" fg:x="43371" fg:w="93"/><text x="99.0450%" y="95.50"></text></g><g><title>block.exe`std::sys::windows::stdio::is_console (98 samples, 0.22%)</title><rect x="98.7859%" y="149" width="0.2232%" height="15" fill="rgb(231,118,14)" fg:x="43367" fg:w="98"/><text x="99.0359%" y="159.50"></text></g><g><title>`0x7FFCAB47D743 (98 samples, 0.22%)</title><rect x="98.7859%" y="133" width="0.2232%" height="15" fill="rgb(238,83,0)" fg:x="43367" fg:w="98"/><text x="99.0359%" y="143.50"></text></g><g><title>`0x7FFCAB47D924 (98 samples, 0.22%)</title><rect x="98.7859%" y="117" width="0.2232%" height="15" fill="rgb(221,39,39)" fg:x="43367" fg:w="98"/><text x="99.0359%" y="127.50"></text></g><g><title>`0x7FFCAB47DA19 (87 samples, 0.20%)</title><rect x="99.0273%" y="53" width="0.1982%" height="15" fill="rgb(222,119,46)" fg:x="43473" fg:w="87"/><text x="99.2773%" y="63.50"></text></g><g><title>`0x7FFCAE12F454 (86 samples, 0.20%)</title><rect x="99.0296%" y="37" width="0.1959%" height="15" fill="rgb(222,165,49)" fg:x="43474" fg:w="86"/><text x="99.2796%" y="47.50"></text></g><g><title>`0x7FFCAB47D64E (90 samples, 0.21%)</title><rect x="99.0228%" y="85" width="0.2050%" height="15" fill="rgb(219,113,52)" fg:x="43471" fg:w="90"/><text x="99.2728%" y="95.50"></text></g><g><title>`0x7FFCAB47D6E3 (88 samples, 0.20%)</title><rect x="99.0273%" y="69" width="0.2005%" height="15" fill="rgb(214,7,15)" fg:x="43473" fg:w="88"/><text x="99.2773%" y="79.50"></text></g><g><title>block.exe`core::result::impl$26::branch (201 samples, 0.46%)</title><rect x="98.7722%" y="229" width="0.4579%" height="15" fill="rgb(235,32,4)" fg:x="43361" fg:w="201"/><text x="99.0222%" y="239.50"></text></g><g><title>block.exe`std::io::buffered::bufwriter::BufWriter::flush_buf&lt;std::io::stdio::StdoutRaw&gt; (200 samples, 0.46%)</title><rect x="98.7745%" y="213" width="0.4556%" height="15" fill="rgb(238,90,54)" fg:x="43362" fg:w="200"/><text x="99.0245%" y="223.50"></text></g><g><title>block.exe`std::io::stdio::impl$1::write (200 samples, 0.46%)</title><rect x="98.7745%" y="197" width="0.4556%" height="15" fill="rgb(213,208,19)" fg:x="43362" fg:w="200"/><text x="99.0245%" y="207.50"></text></g><g><title>block.exe`std::io::stdio::handle_ebadf (200 samples, 0.46%)</title><rect x="98.7745%" y="181" width="0.4556%" height="15" fill="rgb(233,156,4)" fg:x="43362" fg:w="200"/><text x="99.0245%" y="191.50"></text></g><g><title>block.exe`std::sys::windows::stdio::write (200 samples, 0.46%)</title><rect x="98.7745%" y="165" width="0.4556%" height="15" fill="rgb(207,194,5)" fg:x="43362" fg:w="200"/><text x="99.0245%" y="175.50"></text></g><g><title>block.exe`std::sys::windows::stdio::write_valid_utf8_to_console (97 samples, 0.22%)</title><rect x="99.0091%" y="149" width="0.2210%" height="15" fill="rgb(206,111,30)" fg:x="43465" fg:w="97"/><text x="99.2591%" y="159.50"></text></g><g><title>block.exe`std::sys::windows::stdio::write_u16s (92 samples, 0.21%)</title><rect x="99.0205%" y="133" width="0.2096%" height="15" fill="rgb(243,70,54)" fg:x="43470" fg:w="92"/><text x="99.2705%" y="143.50"></text></g><g><title>block.exe`std::sys::windows::cvt (92 samples, 0.21%)</title><rect x="99.0205%" y="117" width="0.2096%" height="15" fill="rgb(242,28,8)" fg:x="43470" fg:w="92"/><text x="99.2705%" y="127.50"></text></g><g><title>block.exe`std::sys::windows::impl$3::is_zero (92 samples, 0.21%)</title><rect x="99.0205%" y="101" width="0.2096%" height="15" fill="rgb(219,106,18)" fg:x="43470" fg:w="92"/><text x="99.2705%" y="111.50"></text></g><g><title>block.exe`core::cell::RefCell::borrow_mut (205 samples, 0.47%)</title><rect x="98.7722%" y="261" width="0.4670%" height="15" fill="rgb(244,222,10)" fg:x="43361" fg:w="205"/><text x="99.0222%" y="271.50"></text></g><g><title>block.exe`std::io::buffered::linewritershim::impl$1::write_all (205 samples, 0.47%)</title><rect x="98.7722%" y="245" width="0.4670%" height="15" fill="rgb(236,179,52)" fg:x="43361" fg:w="205"/><text x="99.0222%" y="255.50"></text></g><g><title>block.exe`core::ptr::drop_in_place (218 samples, 0.50%)</title><rect x="98.7449%" y="469" width="0.4966%" height="15" fill="rgb(213,23,39)" fg:x="43349" fg:w="218"/><text x="98.9949%" y="479.50"></text></g><g><title>block.exe`core::ptr::drop_in_place(alloc::vec::Vec (218 samples, 0.50%)</title><rect x="98.7449%" y="453" width="0.4966%" height="15" fill="rgb(238,48,10)" fg:x="43349" fg:w="218"/><text x="98.9949%" y="463.50"></text></g><g><title>block.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (218 samples, 0.50%)</title><rect x="98.7449%" y="437" width="0.4966%" height="15" fill="rgb(251,196,23)" fg:x="43349" fg:w="218"/><text x="98.9949%" y="447.50"></text></g><g><title>block.exe`alloc::raw_vec::impl$3::drop(alloc::raw_vec::RawVec (218 samples, 0.50%)</title><rect x="98.7449%" y="421" width="0.4966%" height="15" fill="rgb(250,152,24)" fg:x="43349" fg:w="218"/><text x="98.9949%" y="431.50"></text></g><g><title>block.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::current_memory (218 samples, 0.50%)</title><rect x="98.7449%" y="405" width="0.4966%" height="15" fill="rgb(209,150,17)" fg:x="43349" fg:w="218"/><text x="98.9949%" y="415.50"></text></g><g><title>block.exe`std::io::stdio::_print (208 samples, 0.47%)</title><rect x="98.7677%" y="389" width="0.4738%" height="15" fill="rgb(234,202,34)" fg:x="43359" fg:w="208"/><text x="99.0177%" y="399.50"></text></g><g><title>block.exe`std::io::stdio::print_to (208 samples, 0.47%)</title><rect x="98.7677%" y="373" width="0.4738%" height="15" fill="rgb(253,148,53)" fg:x="43359" fg:w="208"/><text x="99.0177%" y="383.50"></text></g><g><title>block.exe`std::io::stdio::impl$11::write_fmt (208 samples, 0.47%)</title><rect x="98.7677%" y="357" width="0.4738%" height="15" fill="rgb(218,129,16)" fg:x="43359" fg:w="208"/><text x="99.0177%" y="367.50"></text></g><g><title>block.exe`std::io::stdio::impl$12::write_fmt (208 samples, 0.47%)</title><rect x="98.7677%" y="341" width="0.4738%" height="15" fill="rgb(216,85,19)" fg:x="43359" fg:w="208"/><text x="99.0177%" y="351.50"></text></g><g><title>block.exe`std::io::Write::write_fmt (208 samples, 0.47%)</title><rect x="98.7677%" y="325" width="0.4738%" height="15" fill="rgb(235,228,7)" fg:x="43359" fg:w="208"/><text x="99.0177%" y="335.50"></text></g><g><title>block.exe`core::fmt::write (208 samples, 0.47%)</title><rect x="98.7677%" y="309" width="0.4738%" height="15" fill="rgb(245,175,0)" fg:x="43359" fg:w="208"/><text x="99.0177%" y="319.50"></text></g><g><title>block.exe`std::io::Write::write_fmt::impl$0::write_str&lt;std::io::stdio::StdoutLock&gt; (208 samples, 0.47%)</title><rect x="98.7677%" y="293" width="0.4738%" height="15" fill="rgb(208,168,36)" fg:x="43359" fg:w="208"/><text x="99.0177%" y="303.50"></text></g><g><title>block.exe`std::io::stdio::impl$13::write_all (207 samples, 0.47%)</title><rect x="98.7699%" y="277" width="0.4715%" height="15" fill="rgb(246,171,24)" fg:x="43360" fg:w="207"/><text x="99.0199%" y="287.50"></text></g><g><title>block.exe`enum2$&lt;core::result::Result&lt;alloc::string::String,enum2$&lt;time::error::format::Format&gt; &gt; &gt;::unwrap(enum2$&lt;core::result::Result&lt;alloc::string::String,enum2$ (9 samples, 0.02%)</title><rect x="99.2415%" y="469" width="0.0205%" height="15" fill="rgb(215,142,24)" fg:x="43567" fg:w="9"/><text x="99.4915%" y="479.50"></text></g><g><title>block.exe`time::date_time::DateTime&lt;enum2$&lt;time::date_time::offset_kind::Fixed&gt; &gt;::format&lt;enum2$&lt;time::date_time::offset_kind::Fixed&gt;,ref$&lt;slice2$&lt;enum2$&lt;time::format_description::borrowed_format_item::BorrowedFormatItem&gt; &gt; &gt; &gt;(time::date_time::DateTime&lt;enum2$&lt;time::date_time::offset_kind::Fixed&gt; &gt;, ref$&lt;slice2$&lt;enum2$ (9 samples, 0.02%)</title><rect x="99.2415%" y="453" width="0.0205%" height="15" fill="rgb(250,187,7)" fg:x="43567" fg:w="9"/><text x="99.4915%" y="463.50"></text></g><g><title>block.exe`time::formatting::formattable::sealed::Sealed::format(ref$&lt;slice2$&lt;enum2$&lt;time::format_description::borrowed_format_item::BorrowedFormatItem&gt; &gt; &gt;*, enum2$&lt;core::option::Option&lt;time::date::Date&gt; &gt;, enum2$&lt;core::option::Option&lt;time::time::Time&gt; &gt;, enum2$&lt;core::option::Option (8 samples, 0.02%)</title><rect x="99.2437%" y="437" width="0.0182%" height="15" fill="rgb(228,66,33)" fg:x="43568" fg:w="8"/><text x="99.4937%" y="447.50"></text></g><g><title>block.exe`time::formatting::formattable::impl$12::format_into(ref$&lt;slice2$&lt;enum2$&lt;time::format_description::borrowed_format_item::BorrowedFormatItem&gt; &gt; &gt;*, alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, enum2$&lt;core::option::Option&lt;time::date::Date&gt; &gt;, enum2$&lt;core::option::Option&lt;time::time::Time&gt; &gt;, enum2$&lt;core::option::Option (7 samples, 0.02%)</title><rect x="99.2460%" y="421" width="0.0159%" height="15" fill="rgb(234,215,21)" fg:x="43569" fg:w="7"/><text x="99.4960%" y="431.50"></text></g><g><title>block.exe`time::formatting::formattable::impl$9::format_into(ref$&lt;slice2$&lt;enum2$&lt;time::format_description::borrowed_format_item::BorrowedFormatItem&gt; &gt; &gt;, alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, enum2$&lt;core::option::Option&lt;time::date::Date&gt; &gt;, enum2$&lt;core::option::Option&lt;time::time::Time&gt; &gt;, enum2$&lt;core::option::Option (7 samples, 0.02%)</title><rect x="99.2460%" y="405" width="0.0159%" height="15" fill="rgb(222,191,20)" fg:x="43569" fg:w="7"/><text x="99.4960%" y="415.50"></text></g><g><title>block.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;usize,enum2$ (7 samples, 0.02%)</title><rect x="99.2460%" y="389" width="0.0159%" height="15" fill="rgb(245,79,54)" fg:x="43569" fg:w="7"/><text x="99.4960%" y="399.50"></text></g><g><title>block.exe`time::formatting::formattable::impl$8::format_into&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt;(enum2$&lt;time::format_description::borrowed_format_item::BorrowedFormatItem&gt;*, alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, enum2$&lt;core::option::Option&lt;time::date::Date&gt; &gt;, enum2$&lt;core::option::Option&lt;time::time::Time&gt; &gt;, enum2$&lt;core::option::Option (7 samples, 0.02%)</title><rect x="99.2460%" y="373" width="0.0159%" height="15" fill="rgb(240,10,37)" fg:x="43569" fg:w="7"/><text x="99.4960%" y="383.50"></text></g><g><title>block.exe`time::formatting::format_component(alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, enum2$&lt;time::format_description::component::Component&gt;, enum2$&lt;core::option::Option&lt;time::date::Date&gt; &gt;, enum2$&lt;core::option::Option&lt;time::time::Time&gt; &gt;, enum2$&lt;core::option::Option (5 samples, 0.01%)</title><rect x="99.2506%" y="357" width="0.0114%" height="15" fill="rgb(214,192,32)" fg:x="43571" fg:w="5"/><text x="99.5006%" y="367.50"></text></g><g><title>block.exe`block::blockchain::BlockChain&lt;block::Data&gt;::push(block::block::Block (264 samples, 0.60%)</title><rect x="98.6651%" y="517" width="0.6014%" height="15" fill="rgb(209,36,54)" fg:x="43314" fg:w="264"/><text x="98.9151%" y="527.50"></text></g><g><title>block.exe`alloc::vec::Vec&lt;block::block::Block&lt;block::Data&gt;,alloc::alloc::Global&gt;::push(block::block::Block (264 samples, 0.60%)</title><rect x="98.6651%" y="501" width="0.6014%" height="15" fill="rgb(220,10,11)" fg:x="43314" fg:w="264"/><text x="98.9151%" y="511.50"></text></g><g><title>block.exe`simple_logger::impl$2::log (263 samples, 0.60%)</title><rect x="98.6674%" y="485" width="0.5991%" height="15" fill="rgb(221,106,17)" fg:x="43315" fg:w="263"/><text x="98.9174%" y="495.50"></text></g><g><title>block.exe`block::miner::Miner&lt;block::Data&gt;::mine (21,034 samples, 47.91%)</title><rect x="51.3622%" y="533" width="47.9134%" height="15" fill="rgb(251,142,44)" fg:x="22548" fg:w="21034"/><text x="51.6122%" y="543.50">block.exe`block::miner::Miner&lt;block::Data&gt;::mine</text></g><g><title>block.exe`chrono::datetime::DateTime&lt;chrono::offset::utc::Utc&gt;::timestamp_millis (8 samples, 0.02%)</title><rect x="99.2756%" y="533" width="0.0182%" height="15" fill="rgb(238,13,15)" fg:x="43582" fg:w="8"/><text x="99.5256%" y="543.50"></text></g><g><title>block.exe`chrono::naive::datetime::NaiveDateTime::timestamp_millis (8 samples, 0.02%)</title><rect x="99.2756%" y="517" width="0.0182%" height="15" fill="rgb(208,107,27)" fg:x="43582" fg:w="8"/><text x="99.5256%" y="527.50"></text></g><g><title>block.exe`chrono::naive::datetime::NaiveDateTime::timestamp (8 samples, 0.02%)</title><rect x="99.2756%" y="501" width="0.0182%" height="15" fill="rgb(205,136,37)" fg:x="43582" fg:w="8"/><text x="99.5256%" y="511.50"></text></g><g><title>block.exe`chrono::offset::utc::Utc::now (8 samples, 0.02%)</title><rect x="99.2756%" y="485" width="0.0182%" height="15" fill="rgb(250,205,27)" fg:x="43582" fg:w="8"/><text x="99.5256%" y="495.50"></text></g><g><title>block.exe`std::time::SystemTime::duration_since (7 samples, 0.02%)</title><rect x="99.2779%" y="469" width="0.0159%" height="15" fill="rgb(210,80,43)" fg:x="43583" fg:w="7"/><text x="99.5279%" y="479.50"></text></g><g><title>block.exe`std::sys::windows::time::SystemTime::sub_time (7 samples, 0.02%)</title><rect x="99.2779%" y="453" width="0.0159%" height="15" fill="rgb(247,160,36)" fg:x="43583" fg:w="7"/><text x="99.5279%" y="463.50"></text></g><g><title>block.exe`std::sys::windows::time::SystemTime::intervals (7 samples, 0.02%)</title><rect x="99.2779%" y="437" width="0.0159%" height="15" fill="rgb(234,13,49)" fg:x="43583" fg:w="7"/><text x="99.5279%" y="447.50"></text></g><g><title>block.exe`alloc::string::impl$67::write_str (8 samples, 0.02%)</title><rect x="99.2984%" y="405" width="0.0182%" height="15" fill="rgb(234,122,0)" fg:x="43592" fg:w="8"/><text x="99.5484%" y="415.50"></text></g><g><title>block.exe`alloc::string::String::push_str (8 samples, 0.02%)</title><rect x="99.2984%" y="389" width="0.0182%" height="15" fill="rgb(207,146,38)" fg:x="43592" fg:w="8"/><text x="99.5484%" y="399.50"></text></g><g><title>block.exe`alloc::vec::Vec::extend_from_slice (8 samples, 0.02%)</title><rect x="99.2984%" y="373" width="0.0182%" height="15" fill="rgb(207,177,25)" fg:x="43592" fg:w="8"/><text x="99.5484%" y="383.50"></text></g><g><title>block.exe`alloc::vec::spec_extend::impl$4::spec_extend (8 samples, 0.02%)</title><rect x="99.2984%" y="357" width="0.0182%" height="15" fill="rgb(211,178,42)" fg:x="43592" fg:w="8"/><text x="99.5484%" y="367.50"></text></g><g><title>block.exe`alloc::vec::Vec::append_elements (8 samples, 0.02%)</title><rect x="99.2984%" y="341" width="0.0182%" height="15" fill="rgb(230,69,54)" fg:x="43592" fg:w="8"/><text x="99.5484%" y="351.50"></text></g><g><title>block.exe`alloc::vec::Vec::len (8 samples, 0.02%)</title><rect x="99.2984%" y="325" width="0.0182%" height="15" fill="rgb(214,135,41)" fg:x="43592" fg:w="8"/><text x="99.5484%" y="335.50"></text></g><g><title>block.exe`alloc::raw_vec::impl$1::reserve::do_reserve_and_handle&lt;u8,alloc::alloc::Global&gt; (7 samples, 0.02%)</title><rect x="99.3007%" y="309" width="0.0159%" height="15" fill="rgb(237,67,25)" fg:x="43593" fg:w="7"/><text x="99.5507%" y="319.50"></text></g><g><title>block.exe`alloc::raw_vec::RawVec::grow_amortized (7 samples, 0.02%)</title><rect x="99.3007%" y="293" width="0.0159%" height="15" fill="rgb(222,189,50)" fg:x="43593" fg:w="7"/><text x="99.5507%" y="303.50"></text></g><g><title>block.exe`core::result::impl$26::branch (7 samples, 0.02%)</title><rect x="99.3007%" y="277" width="0.0159%" height="15" fill="rgb(245,148,34)" fg:x="43593" fg:w="7"/><text x="99.5507%" y="287.50"></text></g><g><title>block.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt; (7 samples, 0.02%)</title><rect x="99.3007%" y="261" width="0.0159%" height="15" fill="rgb(222,29,6)" fg:x="43593" fg:w="7"/><text x="99.5507%" y="271.50"></text></g><g><title>block.exe`core::result::Result::map_err (7 samples, 0.02%)</title><rect x="99.3007%" y="245" width="0.0159%" height="15" fill="rgb(221,189,43)" fg:x="43593" fg:w="7"/><text x="99.5507%" y="255.50"></text></g><g><title>`0x7FFCAE0D1CAA (7 samples, 0.02%)</title><rect x="99.3007%" y="229" width="0.0159%" height="15" fill="rgb(207,36,27)" fg:x="43593" fg:w="7"/><text x="99.5507%" y="239.50"></text></g><g><title>`0x7FFCAE0D1DE7 (7 samples, 0.02%)</title><rect x="99.3007%" y="213" width="0.0159%" height="15" fill="rgb(217,90,24)" fg:x="43593" fg:w="7"/><text x="99.5507%" y="223.50"></text></g><g><title>`0x7FFCAE0D3025 (7 samples, 0.02%)</title><rect x="99.3007%" y="197" width="0.0159%" height="15" fill="rgb(224,66,35)" fg:x="43593" fg:w="7"/><text x="99.5507%" y="207.50"></text></g><g><title>`0x7FFCAE0CCD59 (7 samples, 0.02%)</title><rect x="99.3007%" y="181" width="0.0159%" height="15" fill="rgb(221,13,50)" fg:x="43593" fg:w="7"/><text x="99.5507%" y="191.50"></text></g><g><title>block.exe`core::num::flt2dec::strategy::dragon::format_exact (5 samples, 0.01%)</title><rect x="99.3212%" y="341" width="0.0114%" height="15" fill="rgb(236,68,49)" fg:x="43602" fg:w="5"/><text x="99.5712%" y="351.50"></text></g><g><title>block.exe`core::fmt::float::float_to_decimal_common_exact&lt;f32&gt; (9 samples, 0.02%)</title><rect x="99.3166%" y="405" width="0.0205%" height="15" fill="rgb(229,146,28)" fg:x="43600" fg:w="9"/><text x="99.5666%" y="415.50"></text></g><g><title>block.exe`core::num::flt2dec::to_exact_fixed_str (7 samples, 0.02%)</title><rect x="99.3212%" y="389" width="0.0159%" height="15" fill="rgb(225,31,38)" fg:x="43602" fg:w="7"/><text x="99.5712%" y="399.50"></text></g><g><title>block.exe`core::ops::function::FnMut::call_mut (7 samples, 0.02%)</title><rect x="99.3212%" y="373" width="0.0159%" height="15" fill="rgb(250,208,3)" fg:x="43602" fg:w="7"/><text x="99.5712%" y="383.50"></text></g><g><title>block.exe`core::num::flt2dec::strategy::grisu::format_exact (7 samples, 0.02%)</title><rect x="99.3212%" y="357" width="0.0159%" height="15" fill="rgb(246,54,23)" fg:x="43602" fg:w="7"/><text x="99.5712%" y="367.50"></text></g><g><title>block.exe`alloc::fmt::format::format_inner (21 samples, 0.05%)</title><rect x="99.2961%" y="469" width="0.0478%" height="15" fill="rgb(243,76,11)" fg:x="43591" fg:w="21"/><text x="99.5461%" y="479.50"></text></g><g><title>block.exe`core::result::Result::expect (21 samples, 0.05%)</title><rect x="99.2961%" y="453" width="0.0478%" height="15" fill="rgb(245,21,50)" fg:x="43591" fg:w="21"/><text x="99.5461%" y="463.50"></text></g><g><title>block.exe`core::fmt::write (21 samples, 0.05%)</title><rect x="99.2961%" y="437" width="0.0478%" height="15" fill="rgb(228,9,43)" fg:x="43591" fg:w="21"/><text x="99.5461%" y="447.50"></text></g><g><title>block.exe`core::fmt::write (20 samples, 0.05%)</title><rect x="99.2984%" y="421" width="0.0456%" height="15" fill="rgb(208,100,47)" fg:x="43592" fg:w="20"/><text x="99.5484%" y="431.50"></text></g><g><title>block.exe`alloc::string::String::push_str(ref$ (6 samples, 0.01%)</title><rect x="99.3622%" y="325" width="0.0137%" height="15" fill="rgb(232,26,8)" fg:x="43620" fg:w="6"/><text x="99.6122%" y="335.50"></text></g><g><title>block.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::extend_from_slice(ref$&lt;slice2$ (6 samples, 0.01%)</title><rect x="99.3622%" y="309" width="0.0137%" height="15" fill="rgb(216,166,38)" fg:x="43620" fg:w="6"/><text x="99.6122%" y="319.50"></text></g><g><title>block.exe`alloc::vec::spec_extend::impl$4::spec_extend(alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, core::slice::iter::Iter (6 samples, 0.01%)</title><rect x="99.3622%" y="293" width="0.0137%" height="15" fill="rgb(251,202,51)" fg:x="43620" fg:w="6"/><text x="99.6122%" y="303.50"></text></g><g><title>block.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::append_elements(ptr_const$&lt;slice2$ (6 samples, 0.01%)</title><rect x="99.3622%" y="277" width="0.0137%" height="15" fill="rgb(254,216,34)" fg:x="43620" fg:w="6"/><text x="99.6122%" y="287.50"></text></g><g><title>block.exe`core::ptr::mut_ptr::impl$0::add (6 samples, 0.01%)</title><rect x="99.3622%" y="261" width="0.0137%" height="15" fill="rgb(251,32,27)" fg:x="43620" fg:w="6"/><text x="99.6122%" y="271.50"></text></g><g><title>block.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::ptr (6 samples, 0.01%)</title><rect x="99.3622%" y="245" width="0.0137%" height="15" fill="rgb(208,127,28)" fg:x="43620" fg:w="6"/><text x="99.6122%" y="255.50"></text></g><g><title>block.exe`alloc::raw_vec::impl$1::reserve::do_reserve_and_handle&lt;u8,alloc::alloc::Global&gt;(alloc::raw_vec::RawVec (6 samples, 0.01%)</title><rect x="99.3622%" y="229" width="0.0137%" height="15" fill="rgb(224,137,22)" fg:x="43620" fg:w="6"/><text x="99.6122%" y="239.50"></text></g><g><title>block.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::grow_amortized (6 samples, 0.01%)</title><rect x="99.3622%" y="213" width="0.0137%" height="15" fill="rgb(254,70,32)" fg:x="43620" fg:w="6"/><text x="99.6122%" y="223.50"></text></g><g><title>block.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (6 samples, 0.01%)</title><rect x="99.3622%" y="197" width="0.0137%" height="15" fill="rgb(229,75,37)" fg:x="43620" fg:w="6"/><text x="99.6122%" y="207.50"></text></g><g><title>block.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(enum2$&lt;core::result::Result&lt;core::alloc::layout::Layout,core::alloc::layout::LayoutError&gt; &gt;, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (6 samples, 0.01%)</title><rect x="99.3622%" y="181" width="0.0137%" height="15" fill="rgb(252,64,23)" fg:x="43620" fg:w="6"/><text x="99.6122%" y="191.50"></text></g><g><title>block.exe`enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;, alloc::raw_vec::finish_grow::closure_env$1 (6 samples, 0.01%)</title><rect x="99.3622%" y="165" width="0.0137%" height="15" fill="rgb(232,162,48)" fg:x="43620" fg:w="6"/><text x="99.6122%" y="175.50"></text></g><g><title>`0x7FFCAE0D1CAA (5 samples, 0.01%)</title><rect x="99.3645%" y="149" width="0.0114%" height="15" fill="rgb(246,160,12)" fg:x="43621" fg:w="5"/><text x="99.6145%" y="159.50"></text></g><g><title>block.exe`alloc::string::impl$38::deref (8 samples, 0.02%)</title><rect x="99.3599%" y="405" width="0.0182%" height="15" fill="rgb(247,166,0)" fg:x="43619" fg:w="8"/><text x="99.6099%" y="415.50"></text></g><g><title>block.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (8 samples, 0.02%)</title><rect x="99.3599%" y="389" width="0.0182%" height="15" fill="rgb(249,219,21)" fg:x="43619" fg:w="8"/><text x="99.6099%" y="399.50"></text></g><g><title>block.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::as_ptr (8 samples, 0.02%)</title><rect x="99.3599%" y="373" width="0.0182%" height="15" fill="rgb(205,209,3)" fg:x="43619" fg:w="8"/><text x="99.6099%" y="383.50"></text></g><g><title>block.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::ptr (8 samples, 0.02%)</title><rect x="99.3599%" y="357" width="0.0182%" height="15" fill="rgb(243,44,1)" fg:x="43619" fg:w="8"/><text x="99.6099%" y="367.50"></text></g><g><title>block.exe`colored::ColoredString::compute_style (8 samples, 0.02%)</title><rect x="99.3599%" y="341" width="0.0182%" height="15" fill="rgb(206,159,16)" fg:x="43619" fg:w="8"/><text x="99.6099%" y="351.50"></text></g><g><title>block.exe`alloc::string::impl$41::to_string (16 samples, 0.04%)</title><rect x="99.3440%" y="469" width="0.0364%" height="15" fill="rgb(244,77,30)" fg:x="43612" fg:w="16"/><text x="99.5940%" y="479.50"></text></g><g><title>block.exe`enum2$&lt;core::result::Result&lt;tuple$&lt;&gt;,core::fmt::Error&gt; &gt;::expect(enum2$&lt;core::result::Result&lt;tuple$&lt;&gt;,core::fmt::Error&gt; &gt;, ref$ (16 samples, 0.04%)</title><rect x="99.3440%" y="453" width="0.0364%" height="15" fill="rgb(218,69,12)" fg:x="43612" fg:w="16"/><text x="99.5940%" y="463.50"></text></g><g><title>block.exe`colored::impl$7::fmt (12 samples, 0.03%)</title><rect x="99.3531%" y="437" width="0.0273%" height="15" fill="rgb(212,87,7)" fg:x="43616" fg:w="12"/><text x="99.6031%" y="447.50"></text></g><g><title>block.exe`colored::ColoredString::escape_inner_reset_sequences (9 samples, 0.02%)</title><rect x="99.3599%" y="421" width="0.0205%" height="15" fill="rgb(245,114,25)" fg:x="43619" fg:w="9"/><text x="99.6099%" y="431.50"></text></g><g><title>`0x7FFCAE0CBE44 (6 samples, 0.01%)</title><rect x="99.3918%" y="373" width="0.0137%" height="15" fill="rgb(210,61,42)" fg:x="43633" fg:w="6"/><text x="99.6418%" y="383.50"></text></g><g><title>`0x7FFCAE0CAB11 (8 samples, 0.02%)</title><rect x="99.3918%" y="389" width="0.0182%" height="15" fill="rgb(211,52,33)" fg:x="43633" fg:w="8"/><text x="99.6418%" y="399.50"></text></g><g><title>`0x7FFCAB47D743 (95 samples, 0.22%)</title><rect x="99.4442%" y="133" width="0.2164%" height="15" fill="rgb(234,58,33)" fg:x="43656" fg:w="95"/><text x="99.6942%" y="143.50"></text></g><g><title>`0x7FFCAB47D924 (94 samples, 0.21%)</title><rect x="99.4465%" y="117" width="0.2141%" height="15" fill="rgb(220,115,36)" fg:x="43657" fg:w="94"/><text x="99.6965%" y="127.50"></text></g><g><title>`0x7FFCAB47DA19 (94 samples, 0.21%)</title><rect x="99.4465%" y="101" width="0.2141%" height="15" fill="rgb(243,153,54)" fg:x="43657" fg:w="94"/><text x="99.6965%" y="111.50"></text></g><g><title>`0x7FFCAE12F454 (92 samples, 0.21%)</title><rect x="99.4510%" y="85" width="0.2096%" height="15" fill="rgb(251,47,18)" fg:x="43659" fg:w="92"/><text x="99.7010%" y="95.50"></text></g><g><title>block.exe`std::sys::windows::stdio::is_console (96 samples, 0.22%)</title><rect x="99.4442%" y="149" width="0.2187%" height="15" fill="rgb(242,102,42)" fg:x="43656" fg:w="96"/><text x="99.6942%" y="159.50"></text></g><g><title>block.exe`core::result::impl$26::branch (196 samples, 0.45%)</title><rect x="99.4237%" y="229" width="0.4465%" height="15" fill="rgb(234,31,38)" fg:x="43647" fg:w="196"/><text x="99.6737%" y="239.50"></text></g><g><title>block.exe`std::io::buffered::bufwriter::BufWriter::flush_buf&lt;std::io::stdio::StdoutRaw&gt; (195 samples, 0.44%)</title><rect x="99.4260%" y="213" width="0.4442%" height="15" fill="rgb(221,117,51)" fg:x="43648" fg:w="195"/><text x="99.6760%" y="223.50"></text></g><g><title>block.exe`std::io::stdio::impl$1::write (195 samples, 0.44%)</title><rect x="99.4260%" y="197" width="0.4442%" height="15" fill="rgb(212,20,18)" fg:x="43648" fg:w="195"/><text x="99.6760%" y="207.50"></text></g><g><title>block.exe`std::io::stdio::handle_ebadf (195 samples, 0.44%)</title><rect x="99.4260%" y="181" width="0.4442%" height="15" fill="rgb(245,133,36)" fg:x="43648" fg:w="195"/><text x="99.6760%" y="191.50"></text></g><g><title>block.exe`std::sys::windows::stdio::write (195 samples, 0.44%)</title><rect x="99.4260%" y="165" width="0.4442%" height="15" fill="rgb(212,6,19)" fg:x="43648" fg:w="195"/><text x="99.6760%" y="175.50"></text></g><g><title>block.exe`std::sys::windows::stdio::write_valid_utf8_to_console (91 samples, 0.21%)</title><rect x="99.6629%" y="149" width="0.2073%" height="15" fill="rgb(218,1,36)" fg:x="43752" fg:w="91"/><text x="99.9129%" y="159.50"></text></g><g><title>block.exe`std::sys::windows::stdio::write_u16s (88 samples, 0.20%)</title><rect x="99.6697%" y="133" width="0.2005%" height="15" fill="rgb(246,84,54)" fg:x="43755" fg:w="88"/><text x="99.9197%" y="143.50"></text></g><g><title>block.exe`std::sys::windows::cvt (88 samples, 0.20%)</title><rect x="99.6697%" y="117" width="0.2005%" height="15" fill="rgb(242,110,6)" fg:x="43755" fg:w="88"/><text x="99.9197%" y="127.50"></text></g><g><title>block.exe`std::sys::windows::impl$3::is_zero (88 samples, 0.20%)</title><rect x="99.6697%" y="101" width="0.2005%" height="15" fill="rgb(214,47,5)" fg:x="43755" fg:w="88"/><text x="99.9197%" y="111.50"></text></g><g><title>`0x7FFCAB47D64E (84 samples, 0.19%)</title><rect x="99.6788%" y="85" width="0.1913%" height="15" fill="rgb(218,159,25)" fg:x="43759" fg:w="84"/><text x="99.9288%" y="95.50"></text></g><g><title>`0x7FFCAB47D6E3 (84 samples, 0.19%)</title><rect x="99.6788%" y="69" width="0.1913%" height="15" fill="rgb(215,211,28)" fg:x="43759" fg:w="84"/><text x="99.9288%" y="79.50"></text></g><g><title>`0x7FFCAB47DA19 (84 samples, 0.19%)</title><rect x="99.6788%" y="53" width="0.1913%" height="15" fill="rgb(238,59,32)" fg:x="43759" fg:w="84"/><text x="99.9288%" y="63.50"></text></g><g><title>`0x7FFCAE12F454 (81 samples, 0.18%)</title><rect x="99.6856%" y="37" width="0.1845%" height="15" fill="rgb(226,82,3)" fg:x="43762" fg:w="81"/><text x="99.9356%" y="47.50"></text></g><g><title>block.exe`core::cell::RefCell::borrow_mut (197 samples, 0.45%)</title><rect x="99.4237%" y="261" width="0.4487%" height="15" fill="rgb(240,164,32)" fg:x="43647" fg:w="197"/><text x="99.6737%" y="271.50"></text></g><g><title>block.exe`std::io::buffered::linewritershim::impl$1::write_all (197 samples, 0.45%)</title><rect x="99.4237%" y="245" width="0.4487%" height="15" fill="rgb(232,46,7)" fg:x="43647" fg:w="197"/><text x="99.6737%" y="255.50"></text></g><g><title>block.exe`core::fmt::write (202 samples, 0.46%)</title><rect x="99.4214%" y="309" width="0.4601%" height="15" fill="rgb(229,129,53)" fg:x="43646" fg:w="202"/><text x="99.6714%" y="319.50"></text></g><g><title>block.exe`std::io::Write::write_fmt::impl$0::write_str&lt;std::io::stdio::StdoutLock&gt; (201 samples, 0.46%)</title><rect x="99.4237%" y="293" width="0.4579%" height="15" fill="rgb(234,188,29)" fg:x="43647" fg:w="201"/><text x="99.6737%" y="303.50"></text></g><g><title>block.exe`std::io::stdio::impl$13::write_all (201 samples, 0.46%)</title><rect x="99.4237%" y="277" width="0.4579%" height="15" fill="rgb(246,141,4)" fg:x="43647" fg:w="201"/><text x="99.6737%" y="287.50"></text></g><g><title>block.exe`core::ptr::drop_in_place (218 samples, 0.50%)</title><rect x="99.3872%" y="469" width="0.4966%" height="15" fill="rgb(229,23,39)" fg:x="43631" fg:w="218"/><text x="99.6372%" y="479.50"></text></g><g><title>block.exe`core::ptr::drop_in_place(alloc::vec::Vec (218 samples, 0.50%)</title><rect x="99.3872%" y="453" width="0.4966%" height="15" fill="rgb(206,12,3)" fg:x="43631" fg:w="218"/><text x="99.6372%" y="463.50"></text></g><g><title>block.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (218 samples, 0.50%)</title><rect x="99.3872%" y="437" width="0.4966%" height="15" fill="rgb(252,226,20)" fg:x="43631" fg:w="218"/><text x="99.6372%" y="447.50"></text></g><g><title>block.exe`alloc::raw_vec::impl$3::drop(alloc::raw_vec::RawVec (218 samples, 0.50%)</title><rect x="99.3872%" y="421" width="0.4966%" height="15" fill="rgb(216,123,35)" fg:x="43631" fg:w="218"/><text x="99.6372%" y="431.50"></text></g><g><title>block.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::current_memory (218 samples, 0.50%)</title><rect x="99.3872%" y="405" width="0.4966%" height="15" fill="rgb(212,68,40)" fg:x="43631" fg:w="218"/><text x="99.6372%" y="415.50"></text></g><g><title>block.exe`std::io::stdio::_print (205 samples, 0.47%)</title><rect x="99.4169%" y="389" width="0.4670%" height="15" fill="rgb(254,125,32)" fg:x="43644" fg:w="205"/><text x="99.6669%" y="399.50"></text></g><g><title>block.exe`std::io::stdio::print_to (205 samples, 0.47%)</title><rect x="99.4169%" y="373" width="0.4670%" height="15" fill="rgb(253,97,22)" fg:x="43644" fg:w="205"/><text x="99.6669%" y="383.50"></text></g><g><title>block.exe`std::io::stdio::impl$11::write_fmt (204 samples, 0.46%)</title><rect x="99.4191%" y="357" width="0.4647%" height="15" fill="rgb(241,101,14)" fg:x="43645" fg:w="204"/><text x="99.6691%" y="367.50"></text></g><g><title>block.exe`std::io::stdio::impl$12::write_fmt (204 samples, 0.46%)</title><rect x="99.4191%" y="341" width="0.4647%" height="15" fill="rgb(238,103,29)" fg:x="43645" fg:w="204"/><text x="99.6691%" y="351.50"></text></g><g><title>block.exe`std::io::Write::write_fmt (203 samples, 0.46%)</title><rect x="99.4214%" y="325" width="0.4624%" height="15" fill="rgb(233,195,47)" fg:x="43646" fg:w="203"/><text x="99.6714%" y="335.50"></text></g><g><title>block.exe`core::ptr::drop_in_place(alloc::vec::Vec (5 samples, 0.01%)</title><rect x="99.8861%" y="453" width="0.0114%" height="15" fill="rgb(246,218,30)" fg:x="43850" fg:w="5"/><text x="100.1361%" y="463.50"></text></g><g><title>block.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (5 samples, 0.01%)</title><rect x="99.8861%" y="437" width="0.0114%" height="15" fill="rgb(219,145,47)" fg:x="43850" fg:w="5"/><text x="100.1361%" y="447.50"></text></g><g><title>block.exe`alloc::raw_vec::impl$3::drop(alloc::raw_vec::RawVec (5 samples, 0.01%)</title><rect x="99.8861%" y="421" width="0.0114%" height="15" fill="rgb(243,12,26)" fg:x="43850" fg:w="5"/><text x="100.1361%" y="431.50"></text></g><g><title>block.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::current_memory (5 samples, 0.01%)</title><rect x="99.8861%" y="405" width="0.0114%" height="15" fill="rgb(214,87,16)" fg:x="43850" fg:w="5"/><text x="100.1361%" y="415.50"></text></g><g><title>block.exe`alloc::fmt::format::format_inner (5 samples, 0.01%)</title><rect x="99.8861%" y="389" width="0.0114%" height="15" fill="rgb(208,99,42)" fg:x="43850" fg:w="5"/><text x="100.1361%" y="399.50"></text></g><g><title>block.exe`enum2$&lt;core::result::Result&lt;alloc::string::String,enum2$&lt;time::error::format::Format&gt; &gt; &gt;::unwrap(enum2$&lt;core::result::Result&lt;alloc::string::String,enum2$ (14 samples, 0.03%)</title><rect x="99.8838%" y="469" width="0.0319%" height="15" fill="rgb(253,99,2)" fg:x="43849" fg:w="14"/><text x="100.1338%" y="479.50"></text></g><g><title>block.exe`time::date_time::DateTime&lt;enum2$&lt;time::date_time::offset_kind::Fixed&gt; &gt;::format&lt;enum2$&lt;time::date_time::offset_kind::Fixed&gt;,ref$&lt;slice2$&lt;enum2$&lt;time::format_description::borrowed_format_item::BorrowedFormatItem&gt; &gt; &gt; &gt;(time::date_time::DateTime&lt;enum2$&lt;time::date_time::offset_kind::Fixed&gt; &gt;, ref$&lt;slice2$&lt;enum2$ (8 samples, 0.02%)</title><rect x="99.8975%" y="453" width="0.0182%" height="15" fill="rgb(220,168,23)" fg:x="43855" fg:w="8"/><text x="100.1475%" y="463.50"></text></g><g><title>block.exe`time::formatting::formattable::sealed::Sealed::format(ref$&lt;slice2$&lt;enum2$&lt;time::format_description::borrowed_format_item::BorrowedFormatItem&gt; &gt; &gt;*, enum2$&lt;core::option::Option&lt;time::date::Date&gt; &gt;, enum2$&lt;core::option::Option&lt;time::time::Time&gt; &gt;, enum2$&lt;core::option::Option (8 samples, 0.02%)</title><rect x="99.8975%" y="437" width="0.0182%" height="15" fill="rgb(242,38,24)" fg:x="43855" fg:w="8"/><text x="100.1475%" y="447.50"></text></g><g><title>block.exe`time::formatting::formattable::impl$12::format_into(ref$&lt;slice2$&lt;enum2$&lt;time::format_description::borrowed_format_item::BorrowedFormatItem&gt; &gt; &gt;*, alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, enum2$&lt;core::option::Option&lt;time::date::Date&gt; &gt;, enum2$&lt;core::option::Option&lt;time::time::Time&gt; &gt;, enum2$&lt;core::option::Option (7 samples, 0.02%)</title><rect x="99.8998%" y="421" width="0.0159%" height="15" fill="rgb(225,182,9)" fg:x="43856" fg:w="7"/><text x="100.1498%" y="431.50"></text></g><g><title>block.exe`time::formatting::formattable::impl$9::format_into(ref$&lt;slice2$&lt;enum2$&lt;time::format_description::borrowed_format_item::BorrowedFormatItem&gt; &gt; &gt;, alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, enum2$&lt;core::option::Option&lt;time::date::Date&gt; &gt;, enum2$&lt;core::option::Option&lt;time::time::Time&gt; &gt;, enum2$&lt;core::option::Option (7 samples, 0.02%)</title><rect x="99.8998%" y="405" width="0.0159%" height="15" fill="rgb(243,178,37)" fg:x="43856" fg:w="7"/><text x="100.1498%" y="415.50"></text></g><g><title>block.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;usize,enum2$ (7 samples, 0.02%)</title><rect x="99.8998%" y="389" width="0.0159%" height="15" fill="rgb(232,139,19)" fg:x="43856" fg:w="7"/><text x="100.1498%" y="399.50"></text></g><g><title>block.exe`time::formatting::formattable::impl$8::format_into&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt;(enum2$&lt;time::format_description::borrowed_format_item::BorrowedFormatItem&gt;*, alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, enum2$&lt;core::option::Option&lt;time::date::Date&gt; &gt;, enum2$&lt;core::option::Option&lt;time::time::Time&gt; &gt;, enum2$&lt;core::option::Option (7 samples, 0.02%)</title><rect x="99.8998%" y="373" width="0.0159%" height="15" fill="rgb(225,201,24)" fg:x="43856" fg:w="7"/><text x="100.1498%" y="383.50"></text></g><g><title>block.exe`core::iter::range::impl$6::next(core::ops::range::Range (275 samples, 0.63%)</title><rect x="99.2961%" y="533" width="0.6264%" height="15" fill="rgb(221,47,46)" fg:x="43591" fg:w="275"/><text x="99.5461%" y="543.50"></text></g><g><title>block.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (275 samples, 0.63%)</title><rect x="99.2961%" y="517" width="0.6264%" height="15" fill="rgb(249,23,13)" fg:x="43591" fg:w="275"/><text x="99.5461%" y="527.50"></text></g><g><title>block.exe`core::cmp::impls::impl$72::lt (275 samples, 0.63%)</title><rect x="99.2961%" y="501" width="0.6264%" height="15" fill="rgb(219,9,5)" fg:x="43591" fg:w="275"/><text x="99.5461%" y="511.50"></text></g><g><title>block.exe`simple_logger::impl$2::log (275 samples, 0.63%)</title><rect x="99.2961%" y="485" width="0.6264%" height="15" fill="rgb(254,171,16)" fg:x="43591" fg:w="275"/><text x="99.5461%" y="495.50"></text></g><g><title>`0x7FFCAE0EAA58 (21,335 samples, 48.60%)</title><rect x="51.3280%" y="805" width="48.5991%" height="15" fill="rgb(230,171,20)" fg:x="22533" fg:w="21335"/><text x="51.5780%" y="815.50">`0x7FFCAE0EAA58</text></g><g><title>`0x7FFCACFC257D (21,335 samples, 48.60%)</title><rect x="51.3280%" y="789" width="48.5991%" height="15" fill="rgb(210,71,41)" fg:x="22533" fg:w="21335"/><text x="51.5780%" y="799.50">`0x7FFCACFC257D</text></g><g><title>block.exe`__scrt_common_main_seh() (21,329 samples, 48.59%)</title><rect x="51.3417%" y="773" width="48.5854%" height="15" fill="rgb(206,173,20)" fg:x="22539" fg:w="21329"/><text x="51.5917%" y="783.50">block.exe`__scrt_common_main_seh()</text></g><g><title>block.exe`invoke_main() (21,321 samples, 48.57%)</title><rect x="51.3599%" y="757" width="48.5672%" height="15" fill="rgb(233,88,34)" fg:x="22547" fg:w="21321"/><text x="51.6099%" y="767.50">block.exe`invoke_main()</text></g><g><title>block.exe`std::rt::lang_start&lt;tuple$&lt;&gt; &gt;(void (*) (21,321 samples, 48.57%)</title><rect x="51.3599%" y="741" width="48.5672%" height="15" fill="rgb(223,209,46)" fg:x="22547" fg:w="21321"/><text x="51.6099%" y="751.50">block.exe`std::rt::lang_start&lt;tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>block.exe`std::rt::lang_start_internal (21,321 samples, 48.57%)</title><rect x="51.3599%" y="725" width="48.5672%" height="15" fill="rgb(250,43,18)" fg:x="22547" fg:w="21321"/><text x="51.6099%" y="735.50">block.exe`std::rt::lang_start_internal</text></g><g><title>block.exe`std::panic::catch_unwind (21,321 samples, 48.57%)</title><rect x="51.3599%" y="709" width="48.5672%" height="15" fill="rgb(208,13,10)" fg:x="22547" fg:w="21321"/><text x="51.6099%" y="719.50">block.exe`std::panic::catch_unwind</text></g><g><title>block.exe`std::panicking::try (21,321 samples, 48.57%)</title><rect x="51.3599%" y="693" width="48.5672%" height="15" fill="rgb(212,200,36)" fg:x="22547" fg:w="21321"/><text x="51.6099%" y="703.50">block.exe`std::panicking::try</text></g><g><title>block.exe`std::panicking::try::do_call (21,321 samples, 48.57%)</title><rect x="51.3599%" y="677" width="48.5672%" height="15" fill="rgb(225,90,30)" fg:x="22547" fg:w="21321"/><text x="51.6099%" y="687.50">block.exe`std::panicking::try::do_call</text></g><g><title>block.exe`core::ops::function::FnOnce::call_once (21,321 samples, 48.57%)</title><rect x="51.3599%" y="661" width="48.5672%" height="15" fill="rgb(236,182,39)" fg:x="22547" fg:w="21321"/><text x="51.6099%" y="671.50">block.exe`core::ops::function::FnOnce::call_once</text></g><g><title>block.exe`std::rt::cleanup (21,321 samples, 48.57%)</title><rect x="51.3599%" y="645" width="48.5672%" height="15" fill="rgb(212,144,35)" fg:x="22547" fg:w="21321"/><text x="51.6099%" y="655.50">block.exe`std::rt::cleanup</text></g><g><title>block.exe`std::sync::once::Once::call_once (21,321 samples, 48.57%)</title><rect x="51.3599%" y="629" width="48.5672%" height="15" fill="rgb(228,63,44)" fg:x="22547" fg:w="21321"/><text x="51.6099%" y="639.50">block.exe`std::sync::once::Once::call_once</text></g><g><title>block.exe`std::sys_common::once::queue::Once::is_completed (21,321 samples, 48.57%)</title><rect x="51.3599%" y="613" width="48.5672%" height="15" fill="rgb(228,109,6)" fg:x="22547" fg:w="21321"/><text x="51.6099%" y="623.50">block.exe`std::sys_common::once::queue::Once::is_completed</text></g><g><title>block.exe`core::sync::atomic::AtomicPtr::load (21,321 samples, 48.57%)</title><rect x="51.3599%" y="597" width="48.5672%" height="15" fill="rgb(238,117,24)" fg:x="22547" fg:w="21321"/><text x="51.6099%" y="607.50">block.exe`core::sync::atomic::AtomicPtr::load</text></g><g><title>block.exe`core::sync::atomic::atomic_load (21,321 samples, 48.57%)</title><rect x="51.3599%" y="581" width="48.5672%" height="15" fill="rgb(242,26,26)" fg:x="22547" fg:w="21321"/><text x="51.6099%" y="591.50">block.exe`core::sync::atomic::atomic_load</text></g><g><title>block.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (21,321 samples, 48.57%)</title><rect x="51.3599%" y="565" width="48.5672%" height="15" fill="rgb(221,92,48)" fg:x="22547" fg:w="21321"/><text x="51.6099%" y="575.50">block.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tu..</text></g><g><title>block.exe`block::main (21,321 samples, 48.57%)</title><rect x="51.3599%" y="549" width="48.5672%" height="15" fill="rgb(209,209,32)" fg:x="22547" fg:w="21321"/><text x="51.6099%" y="559.50">block.exe`block::main</text></g><g><title>`0x7FFCAE16E5BF (8 samples, 0.02%)</title><rect x="99.9362%" y="757" width="0.0182%" height="15" fill="rgb(221,70,22)" fg:x="43872" fg:w="8"/><text x="100.1862%" y="767.50"></text></g><g><title>`0x7FFCAE0BA25A (8 samples, 0.02%)</title><rect x="99.9362%" y="741" width="0.0182%" height="15" fill="rgb(248,145,5)" fg:x="43872" fg:w="8"/><text x="100.1862%" y="751.50"></text></g><g><title>`0x7FFCAE0A8CAC (8 samples, 0.02%)</title><rect x="99.9362%" y="725" width="0.0182%" height="15" fill="rgb(226,116,26)" fg:x="43872" fg:w="8"/><text x="100.1862%" y="735.50"></text></g><g><title>`0x7FFCAE109223 (8 samples, 0.02%)</title><rect x="99.9658%" y="741" width="0.0182%" height="15" fill="rgb(244,5,17)" fg:x="43885" fg:w="8"/><text x="100.2158%" y="751.50"></text></g><g><title>`0x7FFCAE16E831 (14 samples, 0.03%)</title><rect x="99.9567%" y="757" width="0.0319%" height="15" fill="rgb(252,159,33)" fg:x="43881" fg:w="14"/><text x="100.2067%" y="767.50"></text></g><g><title>all (43,900 samples, 100%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(206,71,0)" fg:x="0" fg:w="43900"/><text x="0.2500%" y="831.50"></text></g><g><title>`0x7FFCAE103DDE (32 samples, 0.07%)</title><rect x="99.9271%" y="805" width="0.0729%" height="15" fill="rgb(233,118,54)" fg:x="43868" fg:w="32"/><text x="100.1771%" y="815.50"></text></g><g><title>`0x7FFCAE103EB3 (32 samples, 0.07%)</title><rect x="99.9271%" y="789" width="0.0729%" height="15" fill="rgb(234,83,48)" fg:x="43868" fg:w="32"/><text x="100.1771%" y="799.50"></text></g><g><title>`0x7FFCAE15A184 (32 samples, 0.07%)</title><rect x="99.9271%" y="773" width="0.0729%" height="15" fill="rgb(228,3,54)" fg:x="43868" fg:w="32"/><text x="100.1771%" y="783.50"></text></g></svg></svg>